<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Mac安装caffe！真的真的只看这个就够了！]]></title>
      <url>http://jcmels.github.io/2017/03/14/mac-tips-caffe/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>问：其实网上已经有很多mac装caffe的文章了，为什么还要重复“造车”呢？  </p>
<p>答：因为我自诩装软件从来不虚的人照着网上的教程装都跪了。。。坑挺多的。。。  </p>
<p>由于项目需求，我需要使用caffe去做一个东西，然后我就跟caffe杠上了。。。<br><a id="more"></a><br>由于iMac显卡是A卡，所以用不了CUDA加速，这里就装CPU-ONLY版的caffe了  </p>
<p>（PS：本文使用CMake安装）</p>
<h1 id="安装前奏"><a href="#安装前奏" class="headerlink" title="安装前奏"></a>安装前奏</h1><p>官方文档说要装什么libstdc++去编译安装，然而实测并不需要~</p>
<h2 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h2><p>打开你的terminal~输入</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br></pre></td></tr></table></figure>
<h2 id="安装CMake"><a href="#安装CMake" class="headerlink" title="安装CMake"></a>安装CMake</h2><p>去官网下载安装即可，DMG格式直接双击安装<a href="https://cmake.org/download/" target="_blank" rel="external">https://cmake.org/download/</a></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>terminal输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for x in snappy leveldb gflags glog szip hdf5 lmdb homebrew/science/opencv;</span><br><span class="line">do</span><br><span class="line">    brew uninstall $x;</span><br><span class="line">    brew install --fresh -vd $x;</span><br><span class="line">done</span><br><span class="line">brew uninstall --force protobuf; brew install --with-python --fresh -vd protobuf</span><br><span class="line">brew uninstall boost boost-python; brew install --fresh -vd boost boost-python</span><br></pre></td></tr></table></figure>
<h1 id="安装Caffe"><a href="#安装Caffe" class="headerlink" title="安装Caffe"></a>安装Caffe</h1><p>前面都是下载一些依赖现在才正式开始安装caffe</p>
<h2 id="下载caffe源码"><a href="#下载caffe源码" class="headerlink" title="下载caffe源码"></a>下载caffe源码</h2><p>这里直接用git去clone</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/BVLC/caffe.git</span><br><span class="line">cd caffe</span><br><span class="line">cp Makefile.config.example Makefile.config</span><br></pre></td></tr></table></figure>
<p>其实我们用的CMake不用改Makefile.config可是心理作用还是改一下吧，找到Makefile.config（刚copy出来的）搜索CPU_ONLY :＝ 1 ，取消注释</p>
<h2 id="安装caffe"><a href="#安装caffe" class="headerlink" title="安装caffe"></a>安装caffe</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..</span><br></pre></td></tr></table></figure>
<p>咦~ <code>cmake: command not found</code> 明明装了呀，好吧，没配变量~  </p>
<p>terminal输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/Applications/CMake.app/Contents/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>当然，可能你的路径跟我不同，酌情修改~</p>
<p>再次运行<code>cmake ..</code> ,咦~怎么CPU_ONLY还是OFF</p>
<blockquote>
<p>前面说了~CMake改Makefile没用，所以我们需要手动去CMakeCache.txt中搜索CPU_ONLY:BOOL＝，改成CPU_ONLY:BOOL＝ ON。打开CaffeConfig.cmake, 找到set(CPU_ONLY, OFF)，同样改成ON。</p>
</blockquote>
<p>现在开始安装了~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make all</span><br><span class="line">make runtest</span><br><span class="line">make pytest</span><br></pre></td></tr></table></figure>
<p>好了，好多教程到这里就没了，然后你会发现。。。咦。。。明明装了caffe。。为什么还是<code>No module named caffe</code> 这个其实是caffe没加到Python路径上的问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/python</span><br><span class="line">cd caffe</span><br><span class="line">mv /python/caffe ~/python</span><br></pre></td></tr></table></figure>
<p>最后一步把caffe加入Pythonpath，我们直接写入bash_profile里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open ~/.bash_profile</span><br><span class="line">export PYTHONPATH=~/python:$PYTHONPATH       #这句话加到bash_profile里，路径做相应的改变就好</span><br></pre></td></tr></table></figure>
<p>重启mac~KO Caffe！！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://github.com/BVLC/caffe/issues/2757" target="_blank" rel="external">https://github.com/BVLC/caffe/issues/2757</a></li>
<li><a href="https://github.com/BVLC/caffe/issues/263" target="_blank" rel="external">https://github.com/BVLC/caffe/issues/263</a></li>
<li><a href="https://github.com/BVLC/caffe/issues/2241" target="_blank" rel="external">https://github.com/BVLC/caffe/issues/2241</a></li>
<li><a href="http://caffe.berkeleyvision.org/install_osx.html" target="_blank" rel="external">http://caffe.berkeleyvision.org/install_osx.html</a></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门之TensorBoard入门]]></title>
      <url>http://jcmels.github.io/2017/01/13/ML-tensorflow-tensorboard-primer/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>TensorFlow是以流动的张量为名的神经网络开发库，所以Google为了让人们更直观的了解流动的张量的含义，他们做了个TensorBoard让我们直观的看到我们写的框架是怎么个流动法的（纯属YY）。好了玩笑话不说，Google是怎么定义TensorBoard的呢？<br><a id="more"></a></p>
<blockquote>
<p>The computations you’ll use TensorFlow for - like training a massive deep neural network - can be complex and confusing. To make it easier to understand, debug, and optimize TensorFlow programs, we’ve included a suite of visualization tools called TensorBoard. You can use TensorBoard to visualize your TensorFlow graph, plot quantitative metrics about the execution of your graph, and show additional data like images that pass through it. </p>
</blockquote>
<p>大意其实就是我刚刚说的，我们使用TensorFlow写的神经网络直接看上去会显得十分的复杂和混乱，为了更加直观的去调试、优化我们的神经网络，他们开发了TensorBoard–一套可视化工具。。。插一句。。虽然图形化了，可是我看着还是复杂（O(∩_∩)O哈哈~）    </p>
<p>提个醒，TensorBoard官方支持的浏览器是Chrome和Firefox，所以最好使用这两个浏览器去开TensorBoard吧。</p>
<h1 id="可视化第一步"><a href="#可视化第一步" class="headerlink" title="可视化第一步"></a>可视化第一步</h1><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://upload-images.jianshu.io/upload_images/536961-d81b1d65d60152cc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20170113-151208@2x.png"></p>
<p>我们可以对其进行展开，比如我们展开一个first_layer</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-ee2e06ba59e531ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20170113-152056@2x.png"></p>
<p>可以看出来一个layer里面是多么复杂的运算过程，其实我们代码里也就几行代码，TensorFlow帮我们完成了很多事情。  </p>
<p>看了效果之后有没有非常想实现它？那么接下来我们就来学习下怎么去用TensorBoard去画出这么一幅图~</p>
<h2 id="实现graphs"><a href="#实现graphs" class="headerlink" title="实现graphs"></a>实现graphs</h2><p>我们这里用的代码是之前讲TensorFlow入门里最后的拟合曲线的代码，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(layoutname,inputs,in_size,out_size,activatuib_funaction=None)</span>:</span></span><br><span class="line">    Weights=tf.Variable(tf.random_normal([in_size,out_size]))</span><br><span class="line">    biases=tf.Variable(tf.zeros([<span class="number">1</span>,out_size]))+<span class="number">0.1</span></span><br><span class="line">    Wx_plus_b=tf.matmul(inputs,Weights)+biases</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> activatuib_funaction <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs=Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        outputs=activatuib_funaction(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_data=np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:,np.newaxis]</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.05</span>,x_data.shape)</span><br><span class="line">y_data=np.square(x_data)<span class="number">-0.5</span>+noise</span><br><span class="line"></span><br><span class="line">xs=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>])</span><br><span class="line">ys=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l1=add_layer(<span class="string">'first_layer'</span>,xs,<span class="number">1</span>,<span class="number">10</span>,activatuib_funaction=tf.nn.relu)</span><br><span class="line">prediction =add_layer(<span class="string">'secend_layer'</span>,l1,<span class="number">10</span>,<span class="number">1</span>,activatuib_funaction=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">loss=tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">train_step=tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">init=tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    fig=plt.figure()</span><br><span class="line">    ax=fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    ax.scatter(x_data,y_data)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> train <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">        sess.run(train_step,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">        <span class="keyword">if</span> train%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ax.lines.remove(lines[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                  <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">print</span> train,sess.run(loss,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">            prediction_value=sess.run(prediction,feed_dict=&#123;xs:x_data&#125;)</span><br><span class="line">            lines=ax.plot(x_data, prediction_value,<span class="string">'r-'</span>,lw=<span class="number">5</span>)</span><br><span class="line">            plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<p>我们需要对代码进行写改动，让其生成Graphs。</p>
<p>从最开始的缩略图，我们可以看到我们有input、两个layer、一个loss、一个train，那我们第一步先来构建这几个东西。</p>
<p>我们想要构建这些大的框架，只需要我们在想要显示的地方加上这句话<code>with tf.name_scope(&#39;显示的名字&#39;):</code>然后缩进想要放在里面的代码。如input</p>
<p>我们想要显示的效果如下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-0855f3162e12ac06.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20170113-155055@2x.png"></p>
<p>我们需要用<code>with tf.name_scope(&#39;input&#39;):</code>把两个输入值缩进进去：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'inputs'</span>):</span><br><span class="line">    xs=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"x_input"</span>)</span><br><span class="line">    ys=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"y_input"</span>)</span><br></pre></td></tr></table></figure>
<p>x_input、y_input这两个显示值我们只需要在声明的时候在最后加一个<code>name=&#39;显示名&#39;</code>就可以显示出上面的效果了。  </p>
<p>然后两个layer也是类似，由于我们定义了一个方法去添加层，可是如果我们不给他名字，生成graphs的时候layer就是layer、layer_1、layer_2这样子，有点不好看，所以我们传入一个layername。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(layoutname,inputs,in_size,out_size,activatuib_funaction=None,)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(layoutname):</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'weights'</span>):</span><br><span class="line">            Weights=tf.Variable(tf.random_normal([in_size,out_size]),name=<span class="string">'W'</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'biases'</span>):</span><br><span class="line">            biases=tf.Variable(tf.zeros([<span class="number">1</span>,out_size])+<span class="number">0.1</span>,name=<span class="string">'b'</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'Wx_plus_b'</span>):</span><br><span class="line">            Wx_plus_b=tf.add(tf.matmul(inputs,Weights),biases)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> activatuib_funaction <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            outputs=Wx_plus_b</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            outputs=activatuib_funaction(Wx_plus_b)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure>
<p>layer图层里面还有weights和biases、Wx_plus_b等，所以他们也是小图层，所以我们对他们也要单独定义，另外给weights，biases给个name值。  激励函数这些会自动生成，我们不需要去管。</p>
<p>loss和train也是类似，写完tf.name_scope(‘’):之后，我们还需要写文件，写文件的代码TensorFlow也帮我们封装好了，我们只需要调用<code>writer=tf.summary.FileWriter(&quot;文件保存路径如：logs/&quot;,sess.graph)</code>，完整代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(layoutname,inputs,in_size,out_size,activatuib_funaction=None,)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.name_scope(layoutname):</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'weights'</span>):</span><br><span class="line">            Weights=tf.Variable(tf.random_normal([in_size,out_size]),name=<span class="string">'W'</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'biases'</span>):</span><br><span class="line">            biases=tf.Variable(tf.zeros([<span class="number">1</span>,out_size])+<span class="number">0.1</span>,name=<span class="string">'b'</span>)</span><br><span class="line">        <span class="keyword">with</span> tf.name_scope(<span class="string">'Wx_plus_b'</span>):</span><br><span class="line">            Wx_plus_b=tf.add(tf.matmul(inputs,Weights),biases)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> activatuib_funaction <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            outputs=Wx_plus_b</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            outputs=activatuib_funaction(Wx_plus_b)</span><br><span class="line">        <span class="keyword">return</span> outputs</span><br><span class="line">x_data=np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:,np.newaxis]</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.09</span>,x_data.shape)</span><br><span class="line">y_data=np.square(x_data)<span class="number">-0.05</span>+noise</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'inputs'</span>):</span><br><span class="line">    xs=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"x_in"</span>)</span><br><span class="line">    ys=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>],name=<span class="string">"y_in"</span>)</span><br><span class="line">l1=add_layer(<span class="string">"first_layer"</span>,xs,<span class="number">1</span>,<span class="number">10</span>,activatuib_funaction=tf.nn.relu)</span><br><span class="line">prediction =add_layer(<span class="string">'second_layout'</span>,l1,<span class="number">10</span>,<span class="number">1</span>,activatuib_funaction=<span class="keyword">None</span>)</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'loss'</span>):</span><br><span class="line">    loss=tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[<span class="number">1</span>]))</span><br><span class="line"><span class="keyword">with</span> tf.name_scope(<span class="string">'train'</span>):</span><br><span class="line">    train_step=tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">init=tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    writer=tf.summary.FileWriter(<span class="string">"logs/"</span>,sess.graph)</span><br><span class="line">    sess.run(init)</span><br></pre></td></tr></table></figure>
<p>由于Graphs展示的是整个神经网络的框架，所以我们可以删去测试数据。</p>
<p>到这里代码已经写好了，运行代码，生成文件，我们会发现项目的logs目录下会多一个文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-433a965084bdfcf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WX20170113-161843@2x.png"></p>
<p>生成文件之后，我们只需要调出Terminal，cd到项目目录，然后输入tensorboard –logdir=’目录路径如：logs/‘ –host 访问ip如：127.0.0.1，当然我们也可以让他默认ip，把最后的—host 127.0.0.1删掉即可。</p>
<p>然后我们就可以访问127.0.0.1:6006去查看TensorBoard，如果没有数据的话就刷新一下。到此，我们就成功的使用可视化的方式查看我们的神经网络框架了，当然TensorBoard并不是只有这一个功能，后续的功能我会在后续的更新中指出。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>TensorFlow配合TensorBoard的Graphs来构建我们的框架确实非常好用，牛逼的Google肯定不会只赋予TensorBoard这一个功能，他能监控我们的训练过程，让我们可视化的看到训练过程中参数的变化，甚至是图像、音频的变化，还能展示训练过程的数据分布图，所以tensorboard、TensorFlow博大精深，慢慢学习吧！<br>PS:感谢周莫烦大神出的机器学习系列–<a href="https://www.youtube.com/channel/UCdyjiB5H8Pu7aDTNVXTTpcg" target="_blank" rel="external">https://www.youtube.com/channel/UCdyjiB5H8Pu7aDTNVXTTpcg</a><br>需要翻墙观看</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TensorFlow入门]]></title>
      <url>http://jcmels.github.io/2017/01/12/ML-tensorflow-primer/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2016年，由于AlphaGo跟李世石的人机围棋大战让AI第一次如此震撼的登陆人们的脑海中，让人们不禁唏嘘，人工智能如今已经那么厉害了。那么我们想不想通过自己的努力实现一个简化版的阿法狗呢？当然这个过程有点漫长，不过一步一步来，我们先入门阿法狗的框架–TensorFlow。<br><a id="more"></a></p>
<h2 id="什么是TensorFlow"><a href="#什么是TensorFlow" class="headerlink" title="什么是TensorFlow"></a>什么是TensorFlow</h2><p>什么是TensorFlow，Google的人是这样说的：</p>
<blockquote>
<p>TensorFlow™ 是一个采用数据流图（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。 它灵活的架构让你可以在多种平台上展开计算，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。</p>
</blockquote>
<p>TensorFlow是由Google brain team打造的一个神经网络的包，可以说他是以数据流图来进行数值计算的开源库，毕竟从名字来看Tensor     Flow，张量  流动，代表着数据会流动。</p>
<h2 id="为什么要用TensorFlow"><a href="#为什么要用TensorFlow" class="headerlink" title="为什么要用TensorFlow"></a>为什么要用TensorFlow</h2><p>TensorFlow出世以来被人们认为是最好的神经网络开源库之一，最大的优势就是可以让人们把它当成黑盒去构建我们的神经网络，使我们非常容易的构建出神经网络，降低了学习成本、开发成本、维护成本，而且由于开源，所以TensorFlow会进步的非常快。而且有着完整的移植性，那么什么是完整的移植性？TensorFlow可以跑在CPU上，GPU上；可以跑在Linux上、Mac上甚至Windows上；更激动的是移动平台也支持了Android、IOS；甚至目前物联网火热，连树莓派也支持了！ 而且TensorFlow可以用C++开发，也可以用Python开发甚至JAVA、Go。<br>现在，让我们一起来学习TensorFlow吧！</p>
<h1 id="hello-TensorFlow"><a href="#hello-TensorFlow" class="headerlink" title="hello TensorFlow"></a>hello TensorFlow</h1><p>在码农的启蒙时代，我们学习新的语言的时候我们的第一行代码通常都是hello world，向世界招手。那我们先跟TensorFlow打个招呼吧~正好测试下我们的TensorFlow环境有没有搭好~（PS:本文使用的语言为Python2.7.13）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello=tf.constant(<span class="string">'hello TensorFlow'</span>)</span><br><span class="line">sess=tf.Session()</span><br><span class="line"><span class="keyword">print</span> sess.run(hello)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">      hello TensorFlow</span><br></pre></td></tr></table></figure>
<p>看到输出hello TensorFlow，那我们的环境没有问题了，进入基础的学习吧！</p>
<h2 id="常量（constant）"><a href="#常量（constant）" class="headerlink" title="常量（constant）"></a>常量（constant）</h2><p>在TensorFlow中，我们想要申请一个常量是非常简单的，直接使用constant去声明就好了,比如下面的一个加法小程序：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a=tf.constant(<span class="number">2</span>)</span><br><span class="line">b=tf.constant(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">print</span> sess.run(a)+sess.run(b)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出：  </span><br><span class="line">      5</span><br></pre></td></tr></table></figure>
<h2 id="变量（Variable）"><a href="#变量（Variable）" class="headerlink" title="变量（Variable）"></a>变量（Variable）</h2><p>在TensorFlow中，我们声明变量跟Python中直接声明变量有点不同，多了一个初始化的步骤，而且我们想要获取到值得时候需要用session.run（）方法来获取。如下面的小程序，每次运行加一</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">state=tf.Variable(<span class="number">0</span>,name=<span class="string">'counter'</span>)</span><br><span class="line">one=tf.constant(<span class="number">1</span>)</span><br><span class="line">new_value=tf.add(state,one)</span><br><span class="line">update=tf.assign(state,new_value)</span><br><span class="line">init=tf.global_variables_initializer()<span class="comment"># 初始化非常重要！！！！！</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init)<span class="comment"># 一定要运行这一句！！！！！！</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        sess.run(update)</span><br><span class="line">        <span class="keyword">print</span> sess.run(state)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">      1</span><br><span class="line">      2</span><br><span class="line">      3</span><br></pre></td></tr></table></figure>
<h2 id="会话（Session）"><a href="#会话（Session）" class="headerlink" title="会话（Session）"></a>会话（Session）</h2><p>我对session的理解就是一个tf的执行代码块，代码块之间互不影响。在tf中运算、获取变量值、输出文件都需要用到<code>session.run()</code>方法。<br>Session的写法有两种，一种是需要我们手动去关闭session的，另一种是借助Python的with，自身形成一个代码块，结束时自动关闭。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">matrix1=tf.constant([[<span class="number">3</span>,<span class="number">3</span>]])</span><br><span class="line">matrix2=tf.constant([[<span class="number">2</span>],[<span class="number">2</span>]])</span><br><span class="line">product=tf.matmul(matrix1,matrix2)</span><br><span class="line"></span><br><span class="line">sess=tf.Session()<span class="comment"># 需要手动关闭session</span></span><br><span class="line"><span class="keyword">print</span> sess.run(product)</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:<span class="comment"># 类似for循环代码块，不许要手动关闭session</span></span><br><span class="line">    <span class="keyword">print</span> sess.run(product)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[12]]</span><br><span class="line">[[12]]</span><br></pre></td></tr></table></figure>
<h2 id="占位符（placeholder）"><a href="#占位符（placeholder）" class="headerlink" title="占位符（placeholder）"></a>占位符（placeholder）</h2><p>在TensorFlow中，我们想要从外部传入数据到我们的神经网络中，我们需要先声明占位符变量，然后再运行时加入参数feed_dict={input1:[7.],input2:[2.]}，代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line">input1=tf.placeholder(tf.float32)<span class="comment"># 由于TensorFlow的常用数据格式是float32，所以我们这里定它为float32</span></span><br><span class="line">input2=tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line">output=tf.mul(input1,input2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="keyword">print</span> sess.run(output,feed_dict=&#123;input1:[<span class="number">7.</span>],input2:[<span class="number">2.</span>]&#125;)</span><br><span class="line">    <span class="keyword">print</span> sess.run(output,feed_dict=&#123;input1:[<span class="number">8.</span>],input2:[<span class="number">2.</span>]&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">      [ 14.]</span><br><span class="line">      [ 16.]</span><br></pre></td></tr></table></figure>
<h2 id="激励函数（activation-function）"><a href="#激励函数（activation-function）" class="headerlink" title="激励函数（activation function）"></a>激励函数（activation function）</h2><p>激励函数运行时激活神经网络中某一部分神经元，将激活信息向后传入下一层的神经系统。激励函数的实质是非线性方程。 Tensorflow 的神经网络里面处理较为复杂的问题时都会需要运用激励函数<br>TensorFlow当黑盒使用的话，提供了那么几种activation function：  </p>
<ul>
<li>tf.nn.relu</li>
<li>tf.nn.relu6</li>
<li>tf.nn.crelu</li>
<li>tf.nn.elu</li>
<li>tf.nn.softplus</li>
<li>tf.nn.softsign</li>
<li>tf.nn.dropout</li>
<li>tf.nn.bias_add</li>
<li>tf.sigmoid</li>
<li>tf.tanh  </li>
</ul>
<p>这里只列举TensorFlow内置的activation function列表，详情请看：<a href="https://www.tensorflow.org/api_docs/python/nn/activation_functions_" target="_blank" rel="external">https://www.tensorflow.org/api_docs/python/nn/activation_functions_</a></p>
<h1 id="拟合直线"><a href="#拟合直线" class="headerlink" title="拟合直线"></a>拟合直线</h1><p>讲了那么多，我们用一个最基本的例子来拟合一条直线，看看效果吧。为了动态拟合，步数全显示，拟合效果要在本地运行</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x_data=np.random.rand(<span class="number">100</span>).astype(np.float32)</span><br><span class="line">y_data=x_data*<span class="number">0.1</span>+<span class="number">0.3</span></span><br><span class="line"></span><br><span class="line">Weights=tf.Variable(tf.random_uniform([<span class="number">1</span>],<span class="number">-1.0</span>,<span class="number">1.0</span>))</span><br><span class="line">biases=tf.Variable(tf.zeros([<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">y=Weights*x_data+biases</span><br><span class="line">loss=tf.reduce_mean(tf.square(y-y_data))</span><br><span class="line"></span><br><span class="line">optimizer=tf.train.GradientDescentOptimizer(<span class="number">0.5</span>)</span><br><span class="line">train=optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line">init=tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">sess=tf.Session()</span><br><span class="line">sess.run(init)</span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">ax.scatter(x_data, y_data)</span><br><span class="line">plt.ion()</span><br><span class="line">plt.show()</span><br><span class="line"><span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">201</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ax.lines.remove(lines[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    sess.run(train)</span><br><span class="line">    <span class="keyword">if</span> step%<span class="number">20</span>==<span class="number">0</span>:</span><br><span class="line">        print(step,sess.run(Weights),sess.run(biases))</span><br><span class="line">    predition_value = sess.run(Weights)*x_data+sess.run(biases)</span><br><span class="line">    lines = ax.plot(x_data, predition_value, <span class="string">'r-'</span>, lw=<span class="number">3</span>)</span><br><span class="line">    plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-a4371f05920897ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_13_0.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输出：</span><br><span class="line">(0, array([-0.39641881], dtype=float32), array([ 0.86255205], dtype=float32))</span><br><span class="line">(20, array([-0.07684354], dtype=float32), array([ 0.4014357], dtype=float32))</span><br><span class="line">(40, array([ 0.04925749], dtype=float32), array([ 0.32910541], dtype=float32))</span><br><span class="line">(60, array([ 0.08544023], dtype=float32), array([ 0.30835137], dtype=float32))</span><br><span class="line">(80, array([ 0.09582227], dtype=float32), array([ 0.3023963], dtype=float32))</span><br><span class="line">(100, array([ 0.09880129], dtype=float32), array([ 0.30068758], dtype=float32))</span><br><span class="line">(120, array([ 0.09965606], dtype=float32), array([ 0.3001973], dtype=float32))</span><br><span class="line">(140, array([ 0.09990131], dtype=float32), array([ 0.30005661], dtype=float32))</span><br><span class="line">(160, array([ 0.09997168], dtype=float32), array([ 0.30001625], dtype=float32))</span><br><span class="line">(180, array([ 0.09999187], dtype=float32), array([ 0.30000466], dtype=float32))</span><br><span class="line">(200, array([ 0.09999766], dtype=float32), array([ 0.30000135], dtype=float32))</span><br></pre></td></tr></table></figure>
<p>聪明的你应该会知道这是拟合一条y=Wx+b的直线，并通过不断减少loss得到最优解。  </p>
<h2 id="拟合曲线"><a href="#拟合曲线" class="headerlink" title="拟合曲线"></a>拟合曲线</h2><p>拟合完直线之后我们来拟合曲线，咦代码好像有点不同，没错，他多了层的概念！</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs,in_size,out_size,activatuib_funaction=None)</span>:</span></span><br><span class="line">    Weights=tf.Variable(tf.random_normal([in_size,out_size]))</span><br><span class="line">    biases=tf.Variable(tf.zeros([<span class="number">1</span>,out_size]))+<span class="number">0.1</span></span><br><span class="line">    Wx_plus_b=tf.matmul(inputs,Weights)+biases</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> activatuib_funaction <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs=Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        outputs=activatuib_funaction(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x_data=np.linspace(<span class="number">-1</span>,<span class="number">1</span>,<span class="number">300</span>)[:,np.newaxis]</span><br><span class="line">noise=np.random.normal(<span class="number">0</span>,<span class="number">0.05</span>,x_data.shape)</span><br><span class="line">y_data=np.square(x_data)<span class="number">-0.5</span>+noise</span><br><span class="line"></span><br><span class="line">xs=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>])</span><br><span class="line">ys=tf.placeholder(tf.float32,[<span class="keyword">None</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l1=add_layer(xs,<span class="number">1</span>,<span class="number">10</span>,activatuib_funaction=tf.nn.relu)</span><br><span class="line">predition=add_layer(l1,<span class="number">10</span>,<span class="number">1</span>,activatuib_funaction=<span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">loss=tf.reduce_mean(tf.reduce_sum(tf.square(ys-predition),reduction_indices=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">train_step=tf.train.GradientDescentOptimizer(<span class="number">0.1</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line">init=tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    fig=plt.figure()</span><br><span class="line">    ax=fig.add_subplot(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    ax.scatter(x_data,y_data)</span><br><span class="line">    plt.show(block=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line">    sess.run(init)</span><br><span class="line">    <span class="keyword">for</span> train <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">        sess.run(train_step,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">        <span class="keyword">if</span> train%<span class="number">50</span>==<span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ax.lines.remove(lines[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                  <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">print</span> train,sess.run(loss,feed_dict=&#123;xs:x_data,ys:y_data&#125;)</span><br><span class="line">            predition_value=sess.run(predition,feed_dict=&#123;xs:x_data&#125;)</span><br><span class="line">            lines=ax.plot(x_data,predition_value,<span class="string">'r-'</span>,lw=<span class="number">5</span>)</span><br><span class="line">            plt.pause(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-77de622f0d600277.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="output_15_0.png"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">0 4.32185</span><br><span class="line">50 0.0105035</span><br><span class="line">100 0.00698409</span><br><span class="line">150 0.00597143</span><br><span class="line">200 0.00554833</span><br><span class="line">250 0.00528405</span><br><span class="line">300 0.00509511</span><br><span class="line">350 0.00494532</span><br><span class="line">400 0.00480955</span><br><span class="line">450 0.00467035</span><br><span class="line">500 0.00454288</span><br><span class="line">550 0.00441678</span><br><span class="line">600 0.00429541</span><br><span class="line">650 0.00417984</span><br><span class="line">700 0.00406591</span><br><span class="line">750 0.00395388</span><br><span class="line">800 0.00384926</span><br><span class="line">850 0.00374607</span><br><span class="line">900 0.00365008</span><br><span class="line">950 0.00356661</span><br></pre></td></tr></table></figure>
<h2 id="添加层-add-layer"><a href="#添加层-add-layer" class="headerlink" title="添加层(add layer)"></a>添加层(add layer)</h2><p>刚刚的拟合效果还是挺好的吧，可以注意到代码里有个add_layer方法，而且被调用2次，多了2个层，那么我们的add_layer方法怎么去定义的呢</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_layer</span><span class="params">(inputs,in_size,out_size,activatuib_funaction=None)</span>:</span></span><br><span class="line">    Weights=tf.Variable(tf.random_normal([in_size,out_size]))</span><br><span class="line">    biases=tf.Variable(tf.zeros([<span class="number">1</span>,out_size]))+<span class="number">0.1</span></span><br><span class="line">    Wx_plus_b=tf.matmul(inputs,Weights)+biases</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> activatuib_funaction <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        outputs=Wx_plus_b</span><br><span class="line">    <span class="keyword">else</span> :</span><br><span class="line">        outputs=activatuib_funaction(Wx_plus_b)</span><br><span class="line">    <span class="keyword">return</span> outputs</span><br></pre></td></tr></table></figure>
<p>从函数定义来说起，我们调用这个函数的时候，需要给他的值有，输入值，输入值的数量，输出的数量，激活函数，这里给一个默认值，默认为空。</p>
<p>在神经网络的计算中，我们一般都会有权重（Weights）和偏差值（biases）两个变量，所以我们定义了Weights和biases，一般我们会给出初始值，Weights用随机函数生成，biases初始为0再加个0.1，为什么要+0.1呢，因为机器学习中推荐biases不为0，所以加上0.1。<br>然后定义了一个函数W*x+b<br>然后我们看有没有传入激活函数，如果没有激活函数的话就直接输出刚刚的算出来的值，如果有激活函数的话我们只需要把刚算出来的值传进去激活函数就行。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>TensorFlow的基本用法介绍到这里，下一节是对上面的拟合曲线进行讲解，更多高级的TensorFlow用法请继续关注~</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[七牛云直播node.js业务服务器之快速开发]]></title>
      <url>http://jcmels.github.io/2016/12/01/server-nodejs-qiniu-fast/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>业务服务器主要是跟七牛云直播平台进行交互，做流的管理，可以理解为用代码实现七牛云直播管理平台。<br>业务服务器主要处理的就是创建流、查看流状态、获取流、禁用流、启用流、保存直播回放、查询直播历史、获取到URL。当然这部分是七牛提供的SDK，我们也可以在业务服务器上加上我们的东西，比如用户管理，流绑定，礼物系统，聊天系统等等。本文主要用于对API的解释说明，如有不对，请指正！<br><a id="more"></a></p>
<h1 id="引入模块"><a href="#引入模块" class="headerlink" title="引入模块"></a>引入模块</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Pili = <span class="built_in">require</span>(<span class="string">'piliv2'</span>);</span><br></pre></td></tr></table></figure>
<h1 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h1><h2 id="配置AK-SK"><a href="#配置AK-SK" class="headerlink" title="配置AK/SK"></a>配置AK/SK</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ACCESS_KEY = <span class="string">'QiniuAccessKey'</span>;</span><br><span class="line"><span class="keyword">var</span> SECRET_KEY = <span class="string">'QiniuSecretKey'</span>;</span><br><span class="line"><span class="keyword">var</span> credentials = <span class="keyword">new</span> Pili.Credentials(ACCESS_KEY, SECRET_KEY);</span><br></pre></td></tr></table></figure>
<h2 id="配置HUB"><a href="#配置HUB" class="headerlink" title="配置HUB"></a>配置HUB</h2><p>配置这个之前必须要在七牛云平台创建直播空间。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HUB = <span class="string">'HubName'</span>;</span><br><span class="line"><span class="keyword">var</span> hub = <span class="keyword">new</span> Pili.Hub(credentials, HUB);</span><br></pre></td></tr></table></figure></p>
<h1 id="流管理"><a href="#流管理" class="headerlink" title="流管理"></a>流管理</h1><p>这里基本上都是对流进行操作，比如创建流、查询流、流列表、启动流、禁用流等。</p>
<h2 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h2><p>相当于在云平台上通过可视化进行创建流。（streamKey是每个流的标示是唯一的，我是这样处理这个的，每个主播有一个固定的streamKey，这个值是在用户注册的时候UID）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hub.createStream(streamKey, <span class="function"><span class="keyword">function</span>(<span class="params">err, stream</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(stream);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Log error</span></span><br><span class="line">    <span class="built_in">console</span>.log(err, err.errorCode, err.httpCode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="获取流"><a href="#获取流" class="headerlink" title="获取流"></a>获取流</h2><p>获取到流的一些信息如：创建时间、更新时间、结束时间、是否可用等<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = hub.newStream(streamKey);</span><br><span class="line">stream.loadInfo(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(stream);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err + <span class="string">'error code: '</span> + err.errorCode + <span class="string">'http code: '</span> + err.httpCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>返回值：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"credentials"</span>:&#123;</span><br><span class="line">        <span class="attr">"accessKey"</span>:<span class="string">"AK"</span>,</span><br><span class="line">        <span class="attr">"secretKey"</span>:<span class="string">"SK"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"key"</span>:<span class="string">"posttest"</span>,</span><br><span class="line">    <span class="attr">"hub"</span>:<span class="string">"HubName"</span>,</span><br><span class="line">    <span class="attr">"createdAt"</span>:<span class="number">1478569976</span>,</span><br><span class="line">    <span class="attr">"updatedAt"</span>:<span class="number">1479782576</span>,</span><br><span class="line">    <span class="attr">"expireAt"</span>:<span class="number">1482547376</span>,</span><br><span class="line">    <span class="attr">"disabledTill"</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="获取直播信息"><a href="#获取直播信息" class="headerlink" title="获取直播信息"></a>获取直播信息</h2><p>获取到正在直播流的信息：直播的IP、开始的时间戳、fps<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = hub.newStream(streamKey);</span><br><span class="line">stream.liveInfo(<span class="function"><span class="keyword">function</span>(<span class="params">err, status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(status);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err + <span class="string">'error code: '</span> + err.errorCode + <span class="string">'http code: '</span> + err.httpCode);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>返回值：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"startAt"</span>:<span class="number">1480575012</span>,</span><br><span class="line">    <span class="attr">"clientIP"</span>:<span class="string">"xxxxxxxxxxxxxx"</span>,</span><br><span class="line">    <span class="attr">"bps"</span>:<span class="number">900192</span>,</span><br><span class="line">    <span class="attr">"fps"</span>:&#123;</span><br><span class="line">        <span class="attr">"audio"</span>:<span class="number">40</span>,</span><br><span class="line">        <span class="attr">"video"</span>:<span class="number">20</span>,</span><br><span class="line">        <span class="attr">"data"</span>:<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="列出流"><a href="#列出流" class="headerlink" title="列出流"></a>列出流</h2><p>查询所有流和正在直播的流就靠liveonly这个值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> listOptions = &#123;<span class="string">'liveonly'</span>: <span class="literal">false</span>,<span class="string">'prefix'</span>: <span class="string">''</span>,<span class="string">'limit'</span>: <span class="number">2</span>,&#125;;</span><br><span class="line"><span class="keyword">var</span> listCallBack = <span class="function"><span class="keyword">function</span>(<span class="params">err, marker, streams</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        streams.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(stream);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (marker) &#123;</span><br><span class="line">            listOptions.marker = marker;</span><br><span class="line">            hub.listStreams(listOptions, listCallBack);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(err + <span class="string">'error code: '</span> + err.errorCode + <span class="string">'http code: '</span> + err.httpCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hub.listStreams(listOptions, listCallBack);</span><br></pre></td></tr></table></figure></p>
<h2 id="禁用流"><a href="#禁用流" class="headerlink" title="禁用流"></a>禁用流</h2><p>用户想关闭直播业务的时候可以调用，管理员也可以对用户进行禁播。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = hub.newStream(streamKey);</span><br><span class="line">stream.disable(<span class="number">-1</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stream.disabledTill);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="启用流"><a href="#启用流" class="headerlink" title="启用流"></a>启用流</h2><p>开启直播业务<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = hub.newStream(streamKey);</span><br><span class="line">stream.enable(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stream.disabledTill);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h2 id="获取流历史"><a href="#获取流历史" class="headerlink" title="获取流历史"></a>获取流历史</h2><p>需要设定起始时间戳、结束时间戳<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = hub.newStream(streamKey);</span><br><span class="line"><span class="keyword">var</span> publishHistoryOptions = &#123;</span><br><span class="line">   start : <span class="literal">null</span>,    <span class="comment">// optional, in second, unix timestamp</span></span><br><span class="line">   end   : <span class="literal">null</span>,    <span class="comment">// optional, in second, unix timestamp</span></span><br><span class="line">&#125;;</span><br><span class="line">stream.publishHistory(publishHistoryOptions, <span class="function"><span class="keyword">function</span>(<span class="params">err, history</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(history);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err + <span class="string">'error code: '</span> + err.errorCode + <span class="string">'http code: '</span> + err.httpCode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="保存直播视频"><a href="#保存直播视频" class="headerlink" title="保存直播视频"></a>保存直播视频</h2><p>也是要配置初始时间戳、结束时间戳<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stream = hub.newStream(streamKey);</span><br><span class="line"><span class="keyword">var</span> savePlaybackOptions = &#123;</span><br><span class="line">   start : <span class="literal">null</span>,    <span class="comment">// optional, in second, unix timestamp</span></span><br><span class="line">   end   : <span class="literal">null</span>,    <span class="comment">// optional, in second, unix timestamp</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">stream.savePlayback(savePlaybackOptions, <span class="function"><span class="keyword">function</span>(<span class="params">err, m3u8Name</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(m3u8Name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err + <span class="string">'error code: '</span> + err.errorCode + <span class="string">'http code: '</span> + err.httpCode);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="URL相关"><a href="#URL相关" class="headerlink" title="URL相关"></a>URL相关</h1><h2 id="获取推流地址"><a href="#获取推流地址" class="headerlink" title="获取推流地址"></a>获取推流地址</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//获取推流地址</span></span><br><span class="line"><span class="keyword">var</span> pu = Pili.publishURL(credentials, <span class="string">'pili-publish.xxxx.top'</span>, HUB, streamkey, <span class="number">60</span>);</span><br><span class="line"> <span class="comment">//获取RTMP拉流地址</span></span><br><span class="line"> <span class="keyword">var</span> rtmpURL = Pili.rtmpPlayURL(<span class="string">'pili-live-rtmp.xxxx.top'</span>, HUB, streamkey);</span><br><span class="line"> <span class="comment">//获取HDL拉流地址</span></span><br><span class="line"> <span class="keyword">var</span> hdlURL = Pili.hdlPlayURL(<span class="string">'pili-live-hdl.xxxx.top'</span>, HUB, streamkey);</span><br><span class="line"> <span class="comment">//获取HLS拉流地址</span></span><br><span class="line"> <span class="keyword">var</span> hlsURL = Pili.hlsPlayURL(<span class="string">'pili-live-hls.xxxx.top'</span>, HUB, streamkey);</span><br><span class="line"> <span class="comment">//获取实时截图地址</span></span><br><span class="line"> <span class="keyword">var</span> snapURL = Pili.snapshotPlayURL(<span class="string">'pili-live-snapshot.xxxx.top'</span>, HUB, streamkey);</span><br></pre></td></tr></table></figure>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本文只是列出常用的API，以及做了一些解释，代码只是调用SDK中的方法，具体业务需要写在路由中，有相应的网络请求的时候调用相应的代码。业务服务器端的开发还是挺简单的，主要把流与用户进行绑定，后期还有聊天室的绑定。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[七牛云直播Android推流端之开速开发]]></title>
      <url>http://jcmels.github.io/2016/11/10/android-qiniu-pili-fast/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在我看来，定性为快速开发的文档应该是毫无障碍的，对着敲应该就能直接运行的。可是由于七牛迭代太快了，文档跟不上代码迭代的速度，导致快速开始这部分文档的还没更新，很多被废弃的类、方法还在文档中，导致刚入手的时候各种报错，当然如果对照着前面的更新说明和demo，做相应的调整，快速开发也确实可以谈得上，可却跟我所理解的有些不同了。所以本文基于2.1.0版本为大家呈现一个七牛云直播Android端的快速开发。<a id="more"></a>（风格按七牛来）</p>
<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><ul>
<li>已全部完成 BOOK - I 中的所有操作。搭建好带有 Pili server sdk 的业务服务端，SDK 推流信息的输入来自服务端返回的 StreamJson</li>
<li>Android Studio 开发工具。官方<a href="http://developer.android.com/intl/zh-cn/sdk/index.html" target="_blank" rel="external">下载地址</a></li>
<li>下载 Android 官方开发SDK 。官方<a href="https://developer.android.com/intl/zh-cn/sdk/index.html#Other" target="_blank" rel="external">下载地址</a>PLDroidMediaStreaming 软编要求 Min API 15 和硬编要求 Android Min API 18</li>
<li>下载 PLDroidMediaStreaming 最新的 JAR 和 SO 文件。<a href="https://github.com/pili-engineering/PLDroidCameraStreaming/tree/master/releases" target="_blank" rel="external">下载地址</a></li>
<li>请用真机调试代码，模拟器无法调试。<h2 id="创建新工程"><a href="#创建新工程" class="headerlink" title="创建新工程"></a>创建新工程</h2></li>
<li>通过Android studio创建Project<br><img src="http://upload-images.jianshu.io/upload_images/536961-069a34c5a9579acf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new project.png"></li>
<li>设置新项目<ul>
<li>填写 Application id</li>
<li>填写 Company Domain</li>
<li>填写 Package id</li>
<li>选择 Project location</li>
<li>可以使用默认的填写项</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-2e15c2ad48eddfa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="new project.png"></p>
<ul>
<li>选择 Target Android Devices<br>本例中选择使用 MinimumSDK API 18（软编要求 MinimumSDK API 15 ； 硬编要求 MinimumSDK API 18） </li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-660c0ffdcba01bd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Target.png"></p>
<ul>
<li>选择 Empty Activity </li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-129d87dc5f4cb2d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>填写 Main Activity 信息，作为 android.intent.action.MAIN</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-c1a3a4dda0d9e2fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>完成创建 </li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-b690f7e0fb0111b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="导入SDK"><a href="#导入SDK" class="headerlink" title="导入SDK"></a>导入SDK</h2><ul>
<li>将左侧文件夹目录切换为 Project视图</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-bbbc61715a47a7f8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="snipaste20161110_094628.jpg"></p>
<ul>
<li>在 app/src/main 目录下创建 jniLibs 目录。按图所示，将文件导入对应的目录。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-227f7cc42baea5b4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="snipaste20161110_094922.jpg"></p>
<ul>
<li>选中 lib 目录下 pldroid-media-streaming-2.1.0.jar，右键添加新建库，如图所示（这个忘记截图了，结果想再截，就算把dependencies里的compile删了发现右键也不会出来了，所以直接用七牛的吧）</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-0e54d41d78cca1ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li>导入完成，双击 build.gradle文件查看内容，lib 目录中的文件已经自动导入，涉及的文件名如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// jar</span><br><span class="line">pldroid-media-streaming-2.1.0.jar</span><br><span class="line"></span><br><span class="line">// so</span><br><span class="line">libpldroid_mmprocessing.so</span><br><span class="line">libpldroid_streaming_aac_encoder.so</span><br><span class="line">libpldroid_streaming_core.so</span><br><span class="line">libpldroid_streaming_h264_encoder.so</span><br></pre></td></tr></table></figure>
<h2 id="创建基础播放实例"><a href="#创建基础播放实例" class="headerlink" title="创建基础播放实例"></a>创建基础播放实例</h2><h3 id="添加相关权限"><a href="#添加相关权限" class="headerlink" title="添加相关权限"></a>添加相关权限</h3><ul>
<li>在 app/src/main 目录中的 AndroidManifest.xml 中增加 uses-permission<br>和 uses-feature声明</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECORD_AUDIO"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.CAMERA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WAKE_LOCK"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.MODIFY_AUDIO_SETTINGS"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:name</span>=<span class="string">"android.hardware.camera.autofocus"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-feature</span> <span class="attr">android:glEsVersion</span>=<span class="string">"0x00020000"</span> <span class="attr">android:required</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="添加-happy-dns-依赖"><a href="#添加-happy-dns-依赖" class="headerlink" title="添加 happy-dns 依赖"></a>添加 happy-dns 依赖</h3><ul>
<li>打开 app 目录下的 build.gradle，在dependencies添加两条语句</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;  </span><br><span class="line">    ......</span><br><span class="line">    compile 'com.qiniu:happy-dns:0.2.+'</span><br><span class="line">    compile 'com.qiniu.pili:pili-android-qos:0.8.+'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现自己的-Application"><a href="#实现自己的-Application" class="headerlink" title="实现自己的 Application"></a>实现自己的 Application</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePlayerApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        StreamingEnv.init(getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在AndroidManifest的application标签中加上你的Application，如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:name=".SimplePlayerApplication"</span><br></pre></td></tr></table></figure></p>
<h3 id="创建主界面"><a href="#创建主界面" class="headerlink" title="创建主界面"></a>创建主界面</h3><p>  由于是快速开发demo，所以主界面很简单，只有两个按钮，一个推流，一个观看，这里只讲推流的。mainactivity非常简单，只是实现了按钮的点击事件，当然还有些判断权限、添加权限的代码，然后异步请求stream的代码我也省去了。所以最简单的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> android.widget.Button btnpili;</span><br><span class="line">    <span class="keyword">private</span> android.widget.Button btnplay;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mPermissionEnabled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">this</span>.btnplay = (Button) findViewById(R.id.btn_play);</span><br><span class="line">        <span class="keyword">this</span>.btnpili = (Button) findViewById(R.id.btn_pili);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始直播</span></span><br><span class="line">        btnpili.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                startActivity(<span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, HWCameraStreamingActivity.class));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//观看直播</span></span><br><span class="line">        btnplay.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="创建主界面布局文件"><a href="#创建主界面布局文件" class="headerlink" title="创建主界面布局文件"></a>创建主界面布局文件</h3><p>activity_main.xml:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/activity_main"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></span><br><span class="line">    <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></span><br><span class="line">    <span class="attr">tools:context</span>=<span class="string">"com.jcmels.liba.simpleplayerdemo.MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/btn_pili"</span></span><br><span class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">       <span class="attr">android:text</span>=<span class="string">"开始直播"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_play"</span></span><br><span class="line">        <span class="attr">android:layout_below</span>=<span class="string">"@id/btn_pili"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:text</span>=<span class="string">"观看直播"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="创建推流界面（以HW为例，七牛是SW）"><a href="#创建推流界面（以HW为例，七牛是SW）" class="headerlink" title="创建推流界面（以HW为例，七牛是SW）"></a>创建推流界面（以HW为例，七牛是SW）</h3><ul>
<li>创建名为 HWCameraStreamingActivity的 Empty Activity，HWCameraStreamingActivity的主要工作包括：<ul>
<li>配置推流url</li>
<li>初始化推流 SDK 的核心类 MediaStreamingManager</li>
<li>onResume中调用 streamingManager.onResume();</li>
<li>在接收到 READY指令之后，开始推流 streamingManager.startStreaming();，startStreaming需要在非 UI 线程中进行操作。</li>
</ul>
</li>
<li>新建Activity：HWCameraStreamingActivity，代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HWCameraStreamingActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">StreamingStateChangedListener</span>, <span class="title">CameraPreviewFrameView</span>.<span class="title">Listener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MediaStreamingManager streamingManager;</span><br><span class="line">    <span class="keyword">private</span> StreamingProfile streamingProfile;</span><br><span class="line">    <span class="keyword">private</span> MicrophoneStreamingSetting mMicrophoneStreamingSetting;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);</span><br><span class="line">        setContentView(R.layout.activity_hwcamera_streaming);</span><br><span class="line">        AspectFrameLayout afl = (AspectFrameLayout) findViewById(R.id.cameraPreview_afl);</span><br><span class="line">        afl.setShowMode(AspectFrameLayout.SHOW_MODE.REAL);</span><br><span class="line">        CameraPreviewFrameView cameraPreviewFrameView =</span><br><span class="line">                (CameraPreviewFrameView) findViewById(R.id.cameraPreview_surfaceView);</span><br><span class="line">        cameraPreviewFrameView.setListener(<span class="keyword">this</span>);</span><br><span class="line">        String publishurl = <span class="string">"这里换成你的推流地址"</span>;</span><br><span class="line">        streamingProfile = <span class="keyword">new</span> StreamingProfile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streamingProfile.setVideoQuality(StreamingProfile.VIDEO_QUALITY_MEDIUM2)</span><br><span class="line">                    .setAudioQuality(StreamingProfile.AUDIO_QUALITY_MEDIUM2)</span><br><span class="line"><span class="comment">//                .setPreferredVideoEncodingSize(960, 544)</span></span><br><span class="line">                    .setEncodingSizeLevel(StreamingProfile.VIDEO_ENCODING_HEIGHT_480)</span><br><span class="line">                    .setEncoderRCMode(StreamingProfile.EncoderRCModes.BITRATE_PRIORITY)</span><br><span class="line"><span class="comment">//                .setAVProfile(avProfile)</span></span><br><span class="line">                    .setDnsManager(getMyDnsManager())</span><br><span class="line">                    .setAdaptiveBitrateEnable(<span class="keyword">true</span>)</span><br><span class="line">                    .setFpsControllerEnable(<span class="keyword">true</span>)</span><br><span class="line">                    .setStreamStatusConfig(<span class="keyword">new</span> StreamingProfile.StreamStatusConfig(<span class="number">3</span>))</span><br><span class="line">                    .setPublishUrl(publishurl)</span><br><span class="line"><span class="comment">//                .setEncodingOrientation(StreamingProfile.ENCODING_ORIENTATION.PORT)</span></span><br><span class="line">                    .setSendingBufferProfile(<span class="keyword">new</span> StreamingProfile.SendingBufferProfile(<span class="number">0.2f</span>, <span class="number">0.8f</span>, <span class="number">3.0f</span>, <span class="number">20</span> * <span class="number">1000</span>));</span><br><span class="line">            CameraStreamingSetting setting = <span class="keyword">new</span> CameraStreamingSetting();</span><br><span class="line">            setting.setCameraId(Camera.CameraInfo.CAMERA_FACING_BACK)</span><br><span class="line">                    .setContinuousFocusModeEnabled(<span class="keyword">true</span>)</span><br><span class="line">                    .setCameraPrvSizeLevel(CameraStreamingSetting.PREVIEW_SIZE_LEVEL.MEDIUM)</span><br><span class="line">                    .setCameraPrvSizeRatio(CameraStreamingSetting.PREVIEW_SIZE_RATIO.RATIO_16_9);</span><br><span class="line"></span><br><span class="line">            streamingManager = <span class="keyword">new</span> MediaStreamingManager(<span class="keyword">this</span>, afl, cameraPreviewFrameView,</span><br><span class="line">                    AVCodecType.HW_VIDEO_WITH_HW_AUDIO_CODEC); <span class="comment">// hw codec  // soft codec</span></span><br><span class="line">            mMicrophoneStreamingSetting = <span class="keyword">new</span> MicrophoneStreamingSetting();</span><br><span class="line">            mMicrophoneStreamingSetting.setBluetoothSCOEnabled(<span class="keyword">false</span>);</span><br><span class="line">            streamingManager.prepare(setting, mMicrophoneStreamingSetting, <span class="keyword">null</span>, streamingProfile);</span><br><span class="line">            streamingManager.setStreamingStateListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        streamingManager.resume();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        <span class="comment">// You must invoke pause here.</span></span><br><span class="line">        streamingManager.pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(StreamingState streamingState, Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (streamingState) &#123;</span><br><span class="line">            <span class="keyword">case</span> PREPARING:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> READY:</span><br><span class="line">                <span class="comment">// start streaming when READY</span></span><br><span class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">if</span> (streamingManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            streamingManager.startStreaming();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CONNECTING:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STREAMING:</span><br><span class="line">                <span class="comment">// The av packet had been sent.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SHUTDOWN:</span><br><span class="line">                <span class="comment">// The streaming had been finished.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IOERROR:</span><br><span class="line">                <span class="comment">// Network connect error.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SENDING_BUFFER_EMPTY:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> SENDING_BUFFER_FULL:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AUDIO_RECORDING_FAIL:</span><br><span class="line">                <span class="comment">// Failed to record audio.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> OPEN_CAMERA_FAIL:</span><br><span class="line">                <span class="comment">// Failed to open camera.</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> DISCONNECTED:</span><br><span class="line">                <span class="comment">// The socket is broken while streaming</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DnsManager <span class="title">getMyDnsManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IResolver r0 = <span class="keyword">new</span> DnspodFree();</span><br><span class="line">        IResolver r1 = AndroidDnsServer.defaultResolver();</span><br><span class="line">        IResolver r2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            r2 = <span class="keyword">new</span> Resolver(InetAddress.getByName(<span class="string">"119.29.29.29"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DnsManager(NetworkInfo.normal, <span class="keyword">new</span> IResolver[]&#123;r0, r1, r2&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onZoomValueChanged</span><span class="params">(<span class="keyword">float</span> factor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建CameraPreviewFrameView"><a href="#创建CameraPreviewFrameView" class="headerlink" title="创建CameraPreviewFrameView"></a>创建CameraPreviewFrameView</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CameraPreviewFrameView</span> <span class="keyword">extends</span> <span class="title">GLSurfaceView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"CameraPreviewFrameView"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent e)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onZoomValueChanged</span><span class="params">(<span class="keyword">float</span> factor)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Listener mListener;</span><br><span class="line">    <span class="keyword">private</span> ScaleGestureDetector mScaleDetector;</span><br><span class="line">    <span class="keyword">private</span> GestureDetector mGestureDetector;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraPreviewFrameView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        initialize(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CameraPreviewFrameView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        initialize(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(Listener listener)</span> </span>&#123;</span><br><span class="line">        mListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!mGestureDetector.onTouchEvent(event)) &#123;</span><br><span class="line">            <span class="keyword">return</span> mScaleDetector.onTouchEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> GestureDetector.SimpleOnGestureListener mGestureListener = <span class="keyword">new</span> GestureDetector.SimpleOnGestureListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSingleTapUp</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (mListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mListener.onSingleTapUp(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScaleGestureDetector.SimpleOnScaleGestureListener mScaleListener = <span class="keyword">new</span> ScaleGestureDetector.SimpleOnScaleGestureListener() &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">float</span> mScaleFactor = <span class="number">1.0f</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScaleBegin</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onScale</span><span class="params">(ScaleGestureDetector detector)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// factor &gt; 1, zoom</span></span><br><span class="line">            <span class="comment">// factor &lt; 1, pinch</span></span><br><span class="line">            mScaleFactor *= detector.getScaleFactor();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Don't let the object get too small or too large.</span></span><br><span class="line">            mScaleFactor = Math.max(<span class="number">0.01f</span>, Math.min(mScaleFactor, <span class="number">1.0f</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> mListener != <span class="keyword">null</span> &amp;&amp; mListener.onZoomValueChanged(mScaleFactor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"initialize"</span>);</span><br><span class="line">        mScaleDetector = <span class="keyword">new</span> ScaleGestureDetector(context, mScaleListener);</span><br><span class="line">        mGestureDetector = <span class="keyword">new</span> GestureDetector(context, mGestureListener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建推流界面布局文件"><a href="#创建推流界面布局文件" class="headerlink" title="创建推流界面布局文件"></a>创建推流界面布局文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/content"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:background</span>=<span class="string">"@color/background_floating_material_dark"</span></span><br><span class="line">    <span class="attr">tools:context</span>=<span class="string">".HWCameraStreamingActivity"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.qiniu.pili.droid.streaming.widget.AspectFrameLayout</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/cameraPreview_afl"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></span><br><span class="line">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.jcmels.liba.simpleplayerdemo.CameraPreviewFrameView</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/cameraPreview_surfaceView"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span><br><span class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.qiniu.pili.droid.streaming.widget.AspectFrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动 APP 之后，当点击 开始直播，就可以开始推流了。</p>
<h3 id="测试播放效果"><a href="#测试播放效果" class="headerlink" title="测试播放效果"></a>测试播放效果</h3><ul>
<li>测试方法: 从 app server 获取到推流对应的播放地址，输入到播放器中进行播放。</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>通过快速开发，我们能做到的是最基础的推流功能，更为高级的功能还需要进一步的编写。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[云直播概述]]></title>
      <url>http://jcmels.github.io/2016/11/07/android-node-live-summarize/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在的直播平台琳琅满目：一直播、虎牙TV、斗鱼TV、熊猫TV等等。看着这么多直播平台，作为一个程序员难道不想知道这东西是怎么运行的吗？或者自己做一个出来？跟女朋友炫耀也好啊~所以最近在做一个基于七牛云直播平台的直播APP，坑其实也挺多的，我希望通过我的博文，可以尽可能减少掉入坑的几率。<br><a id="more"></a></p>
<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><p>推流就是将摄像头采集到的素材通过RTMP协议将数据包发送至服务器的过程。</p>
<h2 id="拉流"><a href="#拉流" class="headerlink" title="拉流"></a>拉流</h2><p>拉流就是根据指定的URL通过RTMP协议从服务器端获取到素材的过程。</p>
<h2 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h2><p>RTMP是Real Time Messaging Protocol（实时消息传输协议）的首字母缩写。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。RTMP是一种设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信。</p>
<h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><p>当推流端发起推流请求之前，需要先向业务服务器发起流请求，业务服务器再向七牛云直播服务平台请求创建流，当流创建完成之后，七牛云会返回流信息给业务服务器，业务服务器根据流信息进行url拼接，再把URL返回给推流端，推流端根据相应的推流url进行推流，把采集到的数据推给七牛直播平台。七牛直播平台会把素材进行TS切片，并进行数据的持久化处理，保存在七牛的存储空间里。播放端点击一个直播间之后，首先向业务服务器发出请求播放url的请求，业务服务器与七牛云直播平台交互（这一步也可以在推流创建流的时候存到数据库中）获取到流信息，拼接URL，返回url，播放端根据url获取到素材并渲染出来。<br><img src="http://upload-images.jianshu.io/upload_images/536961-b5e082084527e0b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直播框架图.png"></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="业务服务器"><a href="#业务服务器" class="headerlink" title="业务服务器"></a>业务服务器</h2><p>业务服务器主要是推流端和拉流端获取流信息的服务器，推流前需要通过业务服务器与七牛直播服务进行交互，返回流信息，业务服务器根据流信息拼接Url，形成对应关系，保存在本地数据库中；而拉流客户端也需要像业务服务器请求播放url。业务服务器只起到与七牛云直播服务交互的作用，真正的直播分流、切片、存储等功能还是在七牛云直播空间实现的。</p>
<h2 id="推流端"><a href="#推流端" class="headerlink" title="推流端"></a>推流端</h2><p>推流端就是负责素材的采集，再通过RTMP协议发送到服务器。在采集端我们可以做些什么？</p>
<ol>
<li>滤镜处理</li>
<li>手动、自动对焦</li>
<li>美颜</li>
<li>数码变焦</li>
<li>水印<br>这些功能我们通过七牛提供的PLDroidMediaStreaming 就可以轻松实现，当然我们可以定制一些服务，比如评论弹幕、送礼物这些。</li>
</ol>
<h2 id="播放端"><a href="#播放端" class="headerlink" title="播放端"></a>播放端</h2><p>播放端就是负责从服务器获取到素材渲染出来。那么在播放端我们可以做些什么呢？</p>
<ol>
<li>画面旋转</li>
<li>画面预览</li>
<li>秒开直播</li>
<li>手势操作<br>这些功能我们也可以通过七牛提供的PLDroidPlayer轻松实现，同时我们可以定制服务，比如评论、送礼物等。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>当流程与功能大概梳理清楚了，我们可以进行编码操作了，下节将讲解如何快速创建一个直播空间以及快速搭建一个业务服务器。<br>PS：初次接触直播，如果东西解释得不清楚或者说错了，欢迎指正！！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio常用插件之行云流水coding]]></title>
      <url>http://jcmels.github.io/2016/11/02/android-AS-plugins/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现如今，做Android开发的大部分都转移到AS了吧，从ADT转过来确实方便快捷很多，可作为程序员，典型的懒人，这还不够！我们都知道AS是基于IDEA开发的，IDEA的特点就是插件多，那么AS有没有什么插件能让我高（偷）效（懒）写代码呢？以下是我常用的几个插件，效率提升挺多的。<br><a id="more"></a></p>
<h1 id="如何装插件"><a href="#如何装插件" class="headerlink" title="如何装插件"></a>如何装插件</h1><p>IDEA有个在线插件库，所以AS也天生自带了。setting（mac   Preferences）-plugins-search-browse-install.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-9f72dfbfc0b4ea59.gif?imageMogr2/auto-orient/strip" alt="Plugins.gif"><br>好了，了解了怎么装插件之后该谈下我常用的插件了！快捷键默认Windows，括号里是mac的。</p>
<h1 id="CodeGlance"><a href="#CodeGlance" class="headerlink" title="CodeGlance"></a>CodeGlance</h1><p>如果你是用惯Sublime Text的同学肯定会对Minimap印象深刻，对于代码快速定位，minimap有神效，所以我们期望AS或者IDEA中有那么一款插件可以实现这个功能。<br>多方找寻之后发现了CodeGlance，当然当代码量多了之后会有一定的卡顿，这个还要看电脑的配置，展示图是把activity所有的方法全部用上之后演示的，可以看出一般并不会卡。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-b55ad0716243aee7.gif?imageMogr2/auto-orient/strip" alt="CodeGlance.gif"></p>
<h1 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h1><p>现如今有几个app不需要网络交互，与server交互用最多的就是JSON，毕竟连restful规范都推荐使用JSON了，在我们使用GSON去解析JSON的时候我们需要手写一个java bean。作为懒人，有没有一种插件可以帮助我们自动生成java bean。<br>有！如图所示</p>
<blockquote>
<p>Alt+S快捷呼出（mac Option+S）</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-d3f25bf407a44353.gif?imageMogr2/auto-orient/strip" alt="Gson_option_s.gif"></p>
<blockquote>
<p>Alt+Insert呼出（mac Control+Enter）</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-829808eff9dd9d6e.gif?imageMogr2/auto-orient/strip" alt="Gson_control_enter.gif"></p>
<h1 id="Android-ButterKnife-Zelezny"><a href="#Android-ButterKnife-Zelezny" class="headerlink" title="Android ButterKnife Zelezny"></a>Android ButterKnife Zelezny</h1><p>作为一个懒人，没用过懒人库怎么能叫懒人呢，现阶段最火的懒人库非butterknife莫属，使用注解方式findbyid和onclick，这也就少写一些代码，怎么能算懒呢，使用Android_ButterKnife_Zelezny自动生成findbyid和onclick代码才叫懒嘛！效果如图！<br>光标选中引用layout资源文件那一行，Alt+Insert(mac control+enter)—Generate ButterKnife Injections</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-02e9cedadbfbb8be.gif?imageMogr2/auto-orient/strip" alt="Android_ButterKnife_Zelezny.gif"></p>
<h1 id="RemoveButterKnife"><a href="#RemoveButterKnife" class="headerlink" title="RemoveButterKnife"></a>RemoveButterKnife</h1><p>使用ButterKnife之后代码确实少了好多可是可读性变差了，而且有的项目不能使用butterknife，这时候难道我们一行一行把注解删掉吗？然后再手写findbyid？当然不用，RemoveButterKnife可以帮我们删掉bind注解并生成findView代码，不过有个bug是删不了onclick注解。点击Edit–RemoveButterKnife,效果如图（录屏录不到状态栏）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-0d0be9735d46aade.gif?imageMogr2/auto-orient/strip" alt="RemoveButterKnife.gif"></p>
<h1 id="Android-Studio-Prettify"><a href="#Android-Studio-Prettify" class="headerlink" title="Android Studio Prettify"></a>Android Studio Prettify</h1><p>如果不想用ButterKnife注解方式findview，还有一种选择，那就是Prettift，而且可以选择生成全局变量还是局部变量。光标选中引用layout资源那一行，全局变量<br>：Alt+Insert–View Fields(mac control+Enter–View Fields)局部变量：Alt+Insert–View Variables(mac control+Enter–View Variables).<br><img src="http://upload-images.jianshu.io/upload_images/536961-732e43f8677d3d96.gif?imageMogr2/auto-orient/strip" alt="Android_Studio_Prettify_findbyid.gif"></p>
<p>Prettift还有个附属功能，可以不用去string.xml文件里就可以生成字符串常量<br>,光标选中字符串，右键Extract String resource.</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-3f6e9b40a9a4e7d8.gif?imageMogr2/auto-orient/strip" alt="Android_Studio_Prettify.gif"></p>
<h1 id="Android-Postfix-Completion"><a href="#Android-Postfix-Completion" class="headerlink" title="Android Postfix Completion"></a>Android Postfix Completion</h1><p>Android Postfix Completion其实是对代码提醒的一个拓展，他能快捷生成for循环、toast、sout、log等，直接字符串或者返回字符串的方法后面打点，fori、toast、sout、log、not null回车即可。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/536961-80cbb325e04f5eb7.gif?imageMogr2/auto-orient/strip" alt="Android_Postfix_Completion.gif"></p>
<h1 id="JSONOnlineVewer"><a href="#JSONOnlineVewer" class="headerlink" title="JSONOnlineVewer"></a>JSONOnlineVewer</h1><p>如果在chrome用过postman插件的话，应该会期望IDE有个测试接口的功能，所以JSONOnlineVewer满足你~界面可能有点丑，不过功能还是很完善的！配合GsonFormat输出爆表。<br><img src="http://upload-images.jianshu.io/upload_images/536961-74b7b9d8dd9c7da9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="JSONView.png"></p>
<h1 id="Android-Drawable-Importer"><a href="#Android-Drawable-Importer" class="headerlink" title="Android  Drawable Importer"></a>Android  Drawable Importer</h1><p>做Android开发难免需要做屏幕适配，可是每个分辨率都导一次<br>图片还是挺麻烦的， Android  Drawable Importer可以解决这个问题，只需要导一次图片选择不同分辨率，就可以导入多个分辨率的图片了。<br>（额。。。这个不知道为什么AS升级之后用不了，图片下次补）</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><blockquote>
<p>工欲善其事必先利其器</p>
</blockquote>
<p>当我们有一个快捷开发的编程环境之后，不仅代码效率提高，而且越写越开心。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android与Python爱之初体验]]></title>
      <url>http://jcmels.github.io/2016/10/27/android-python-love/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看到这个标题，大家可能会认为就是Android运行python脚本，或者用python写app，这些用QPython和P4A就可以实现了。我在想既然C可以调用Python，那么Android能不能通过JNI去调用C里的方法，C再去调用Python方法，实现Android与Python交互呢？用最近很热的一个概念来说JNI就是个壳。（本文假设大家有JNI开发基础）<br><a id="more"></a></p>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>由于需求很明确了，所以整体流程大概就是这样。<br><img src="http://upload-images.jianshu.io/upload_images/536961-bc9ff83771af4c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="交互流程"></p>
<h1 id="为什么要用python"><a href="#为什么要用python" class="headerlink" title="为什么要用python"></a>为什么要用python</h1><p>首先看下我们为什么要在Android里需要使用Python，我认为主要有一下几个优点</p>
<ol>
<li>代码简洁，这个真的是极度简洁的语言，比如我们想要print一个hello world，Java要这样做<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>而Python只需要一句话就可以print出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">"hello world"</span>)</span><br></pre></td></tr></table></figure></p>
<ol>
<li>上手快，按网友所说，只需要读完Python API就可以成为大神，实际体验确实如此，十分好上手，如果现在让我推荐一个没有学过编程的人学习一款脚本语言，我会推荐他学一下python。</li>
<li>前期开发效率高，正如前两个优点所说，代码简洁、上手快而且由于属于超高级语言，很多东西都封装好了，决定了他前期开发效率很高。</li>
<li>可移植性强，由于是解释性语言，只需要有解释器，他可以运行在任何平台。</li>
<li>拓展性强，C/JAVA都有接口可以调用到Python，Python也可以调用到C，对Python进项拓展。</li>
<li>丰富的库，由于超高级语言，封装了很多方法，而且好多大牛对其开发了库。</li>
</ol>
<p>当然还有几个缺点必须要强调一下。</p>
<ol>
<li>强制缩进，代码简洁是把双刃剑，由于缩进所以简洁，而又由于缩进导致无法自动格式化代码，而且代码块的分割都是靠缩进，这时可能会造成混乱。</li>
<li>运行速度相对较慢，当然这个对相对C这种接近底层的语言来说的，Python在运行时先解析，再运行，而且由于高层语言相比底层语言都会慢那么一点。</li>
<li>版本兼容性较差，这个体现最明显的就是Python3和Python2，Python3不向下兼容  </li>
</ol>
<h1 id="Python-C"><a href="#Python-C" class="headerlink" title="Python C"></a>Python C</h1><p>Python C是C语言调用Python的一组API，通过它我们可以调用到Python方法。</p>
<h2 id="Python-C开发步骤"><a href="#Python-C开发步骤" class="headerlink" title="Python C开发步骤"></a>Python C开发步骤</h2><ol>
<li>引入头文件Python.h;</li>
<li>初始化python（Py_Initialize();）</li>
<li>引入模块（pModule = PyImport_Import(“pythoncode”);）</li>
<li>获取模块中的函数（PyObject_GetAttrString(pModule, “hello”);<br>）</li>
<li>调用获取的函数（PyEval_CallObject(pFunction, NULL);<br>）</li>
<li>释放python（Py_Finalize();）  </li>
</ol>
<p>对应的代码如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="string">"Python.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Py_Initialize();</span><br><span class="line">	PyObject *pModule;</span><br><span class="line">	PyObject *pFunction;</span><br><span class="line">	pModule = PyImport_Import(<span class="string">"pythoncode"</span>);</span><br><span class="line">	pFunction = PyObject_GetAttrString(pModule, <span class="string">"hello"</span>);</span><br><span class="line">	PyEval_CallObject(pFunction, <span class="literal">NULL</span>);</span><br><span class="line">	Py_Finalize();</span><br><span class="line">	return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当然，直接运行这段代码会报错，因为Python.h找不到还有相应的lib找不到，这里强烈建议使用mac或者Linux开发！！！填坑效率会比Windows高好多。具体怎么样处理这里先不说，如果实在需要，留言给我，我会另开一篇博文，毕竟这里是讲Android调用python的，而这个是在桌面环境下C调用Python的，而且百度也很多。</p>
<h1 id="JNI-Python-C"><a href="#JNI-Python-C" class="headerlink" title="JNI Python C"></a>JNI Python C</h1><p>当我成功使用C语言调用Python之后，我着手在JNI开发里调用Python，Python文件放在assets中 。<br>但是在开发过程中遇到了以下几个问题：</p>
<ol>
<li>头文件找不到（Python.h）</li>
<li>没有移动平台的python.so</li>
<li>兼容性</li>
<li>找不到.py文件  </li>
</ol>
<p>接下来一个一个填坑。</p>
<h2 id="头文件找不到（Python-h）"><a href="#头文件找不到（Python-h）" class="headerlink" title="头文件找不到（Python.h）"></a>头文件找不到（Python.h）</h2><p>在MK文件中添加引用，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE    := pybridge</span><br><span class="line">LOCAL_SRC_FILES := pybridge.c</span><br><span class="line">LOCAL_LDLIBS := -llog</span><br><span class="line">LOCAL_SHARED_LIBRARIES := python3.5m</span><br><span class="line">APP_STL := gnustl_static</span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE    := python3.5m</span><br><span class="line">LOCAL_SRC_FILES := $(CRYSTAX_PATH)/sources/python/<span class="number">3.5</span>/libs/$(TARGET_ARCH_ABI)/libpython3.5m.so</span><br><span class="line">LOCAL_EXPORT_CFLAGS := -I $(CRYSTAX_PATH)/sources/python/<span class="number">3.5</span>/include/python/</span><br><span class="line">APP_STL := gnustl_static</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></p>
<p>这段代码其实也把下一个问题解决了。  </p>
<p>另外我们刚项目开始的时候可能为了开发方便，会在gradle中配置JNI资源文件夹路径，可是这导致了run project的时候AS也会对其中的C文件进行语法检查，这样由于没有外部头文件依赖，编译不会通过，所以我们需要在gradle中把JNI资源文件夹删了，用<code>[]</code>代替<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sourceSets.main &#123;   </span><br><span class="line">   jni.srcDirs = []   </span><br><span class="line">   jniLibs.srcDir 'src/main/libs'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>当我们编译成功SO库之后，C文件在运行中并不会被调用，而是调用编译为.so的文件中的方法。</p>
<h2 id="没有移动平台的python-so"><a href="#没有移动平台的python-so" class="headerlink" title="没有移动平台的python.so"></a>没有移动平台的python.so</h2><p>想要运行Python必须要有解释器，Android本身没有带，所以我们需要在程序中内嵌一个解释器，可是苦于找不到合适的so库，曾把P4A的python编译了一次，可是版本兼容性差，可用性不高。直到找到了Crystax NDK，它在10.3之后已经开始支持python for Android了，而且这个NDK资源包还填了几乎所有Android调用python的坑，包括第一个找不到头文件的问题，兼容的问题。在MK文件中，我们还需要加一段代码，编译crystax so库。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE    := crystax</span><br><span class="line">LOCAL_SRC_FILES := $(CRYSTAX_PATH)/sources/crystax/libs/$(TARGET_ARCH_ABI)/libcrystax.so</span><br><span class="line">LOCAL_EXPORT_CFLAGS := -I $(CRYSTAX_PATH)/sources/crystax/include/crystax/</span><br><span class="line">APP_STL := gnustl_static</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure></p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>Android目前有7个常见平台需要适配，其余的都没问题，只有X86和X86_64的有问题，推测crystax NDK Windows还没完善，因为mac下是可以直接编译的，所以有关编译的东西最好用Linux和Mac，Windows下我删了一个头文件，就可以运行了，没有发现异常。具体哪个我忘了，不过运行时报错哪个就去相应的文件里把头文件依赖删了就行，就一个。<br>然后生成7个平台的so库只需要在Application.mk中添加以下代码即可(APP_PLATFORM看个人调节)：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">APP_PLATFORM := android-<span class="number">19</span></span><br><span class="line">APP_ABI := armeabi-v7a armeabi mips mips64 arm64-v8a x86 x86_64</span><br></pre></td></tr></table></figure></p>
<h2 id="找不到-py文件"><a href="#找不到-py文件" class="headerlink" title="找不到.py文件"></a>找不到.py文件</h2><p>不知道什么原因，assets文件夹里的py文件获取不到，似乎是不能识别asset路径？求大神告知。解决方法就是把assets文件夹里的文件复制到设备的data文件夹里，再进行初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">listAssets</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; assets = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String assetList[] = mAssetManager.list(path);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (assetList.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String asset : assetList) &#123;</span><br><span class="line">                    List&lt;String&gt; subAssets = listAssets(path + <span class="string">'/'</span> + asset);</span><br><span class="line">                    assets.addAll(subAssets);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                assets.add(path);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> assets;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//复制</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyAssetFile</span><span class="params">(String src, String dst)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(dst);</span><br><span class="line">        Log.i(LOGTAG, String.format(<span class="string">"Copying %s -&gt; %s"</span>, src, dst));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File dir = file.getParentFile();</span><br><span class="line">            <span class="keyword">if</span> (!dir.exists()) &#123;</span><br><span class="line">                dir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            InputStream in = mAssetManager.open(src);</span><br><span class="line">            OutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> read = in.read(buffer);</span><br><span class="line">            <span class="keyword">while</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, read);</span><br><span class="line">                read = in.read(buffer);</span><br><span class="line">            &#125;</span><br><span class="line">            out.close();</span><br><span class="line">            in.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取asset目录</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getAssetsDataDir</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String appDataDir = mContext.getApplicationInfo().dataDir;</span><br><span class="line">        <span class="keyword">return</span> appDataDir + <span class="string">"/assets/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调用复制代码</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyAssets</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String asset : listAssets(path)) &#123;</span><br><span class="line">            copyAssetFile(asset, getAssetsDataDir() + asset);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p> JNI C代码：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">   <span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_jcmels_liba_pybridge_PyBridge_start</span></span><br><span class="line">        <span class="params">(JNIEnv *env, jclass jc, jstring path)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *pypath = (*env)-&gt;GetStringUTFChars(env, path, NULL);</span><br><span class="line">    <span class="keyword">char</span> paths[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(paths, <span class="keyword">sizeof</span>(paths), <span class="string">"%s:%s/stdlib.zip"</span>, pypath, pypath);</span><br><span class="line">    <span class="keyword">wchar_t</span> *wchar_paths = Py_DecodeLocale(paths, NULL);</span><br><span class="line">    Py_SetPath(wchar_paths);</span><br><span class="line">    Py_Initialize();</span><br><span class="line">    PyRun_SimpleString(<span class="string">"import helloPy"</span>);</span><br><span class="line">    PyRun_SimpleString(<span class="string">"from ctypes import *"</span>);<span class="comment">//这个为了引入库，若不需要引入可以不用</span></span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="function">JNIEXPORT jint JNICALL <span class="title">Java_com_jcmels_liba_pybridge_PyBridge_stop</span></span><br><span class="line">        <span class="params">(JNIEnv *env, jclass jc)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    Py_Finalize();</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_jcmels_liba_pysayhello_PyBridge_call</span>      </span><br><span class="line">  <span class="params">(JNIEnv *env, jclass jc)</span></span>&#123;</span><br><span class="line">PyObject* myModuleString = PyUnicode_FromString((char*)<span class="string">"helloPy"</span>); </span><br><span class="line">PyObject* myModule = PyImport_Import(myModuleString);    </span><br><span class="line">PyObject* myFunction = PyObject_GetAttrString(myModule, (char*)<span class="string">"hello"</span>);</span><br><span class="line">jstring result = PyObject_CallObject(myFunction, NULL);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Python方面就是个简单的hello函数，返回“hello”字符串。</p>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>当我把上述问题一一解决之后，终于见到之前写的python代码里返回的hello语句了。可由此也出现了一个问题，当我调用Python方法的时候，必须先引入模块，再引入方法，而且当我们需要添加Python方法的时候，我们还要去写重复的调用方法，只是换个方法名，而且需要再次编译各平台so库，我就想有没有一种方法可以只修改Python方法和java调用方法，而不去动C方法呢。<br>修改后的流程图如下：<br><img src="http://upload-images.jianshu.io/upload_images/536961-5b5e96d996cefb98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="优化后流程"><br>Python端增加一个路由方法，再写一个函数字典，把所有方法都加到字典里，C里调用的就是这个路由方法，java端调用的时候传入json里面包含了所需python方法，当json传入python中路由方法之后，自动匹配到相应的方法，每次添加新的方法只需要在python中添加字典已经方法，java调用时传入新的方法即可。<br>Python路由方法：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">router</span><span class="params">(args)</span>:</span></span><br><span class="line">	values = json.loads(args)</span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		function = routes[values.get(<span class="string">'function'</span>)]</span><br><span class="line">		status = <span class="string">'ok'</span></span><br><span class="line">		res = function(values)</span><br><span class="line">	<span class="keyword">except</span> KeyError:</span><br><span class="line">		status = <span class="string">'fail'</span></span><br><span class="line">		res = <span class="keyword">None</span></span><br><span class="line">	<span class="keyword">return</span> json.dumps(&#123;</span><br><span class="line">		<span class="string">'status'</span>: status,</span><br><span class="line">		<span class="string">'result'</span>: res,</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure></p>
<p>Python函数字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">routes = &#123;</span><br><span class="line">	<span class="string">'hello'</span>: hello,</span><br><span class="line">	<span class="string">'add'</span>: add,</span><br><span class="line">	<span class="string">'mul'</span>: mul,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>JNI C调用python方法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_jcmels_liba_pysayhello_PyBridge_call</span></span><br><span class="line">	<span class="params">(JNIEnv *env, jclass jc, jstring payload)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	jboolean iscopy;</span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">char</span> *payload_utf = (*env)-&gt;GetStringUTFChars(env, payload, &amp;iscopy);</span><br><span class="line">	PyObject* myModuleString = PyUnicode_FromString((char*)<span class="string">"helloPy"</span>);</span><br><span class="line">	PyObject* myModule = PyImport_Import(myModuleString);</span><br><span class="line">	PyObject* myFunction = PyObject_GetAttrString(myModule, (char*)<span class="string">"router"</span>);</span><br><span class="line">	PyObject* args = PyTuple_Pack(<span class="number">1</span>, PyUnicode_FromString(payload_utf));</span><br><span class="line">	PyObject* myResult = PyObject_CallObject(myFunction, args);</span><br><span class="line">	<span class="keyword">char</span> *myResultChar = PyUnicode_AsUTF8(myResult);</span><br><span class="line">	<span class="keyword">char</span> *res = <span class="built_in">malloc</span>(sizeof(char) * strlen(myResultChar) + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">strcpy</span>(res, myResultChar);</span><br><span class="line">	jstring result = (*env)-&gt;NewStringUTF(env, res);</span><br><span class="line">	return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>java调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">json.put(<span class="string">"function"</span>, <span class="string">"hello"</span>);</span><br><span class="line">PyBridge.call(json);</span><br></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>到此，Android call Python就基本完成了，调用第三方库的话只需要把ctype文件（Crystax文件夹中的sources\python\3.5\libs\对应平台\modules_ctypes.so）放到assets文件夹中就可以通过<code>cdll.LoadLibrary</code>来调用第三方库了。<br>在此感谢joaoventura大神的指导！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus3.0入门笔记]]></title>
      <url>http://jcmels.github.io/2016/10/27/android-eventbus-primer/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>网上有很多教程，为什么还需要写一次？</p>
</blockquote>
<p>因为网上很多基于2.4的，鉴于3.0跟2.4差别还是很大，另外教程有点乱，所以重写一篇，方便大家（百度没收录因为不支持github pager，所以只方便谷歌的。。。）也方便自己。<br>  <a id="more"></a></p>
<h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><blockquote>
<p>EventBus是什么？  </p>
<p>EventBus是一个Android端优化的publish/subscribe消息总线，简化了应用程序内各组件间、组件与后台线程间的通信。比如请求网络，等网络返回时通过Handler或Broadcast通知UI，两个Fragment之间需要通过Listener通信，这些需求都可以通过EventBus实现。  </p>
</blockquote>
<p>另外EventBus其实是一类框架的总称，只不过由于greenrobot做的很优秀，所以大家说起EventBus的时候一般指的是greenrobot的EventBus,greenrobot应该不会陌生吧，GreenDAO就出自他们之手。</p>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><blockquote>
<p>为什么要用EventBus？</p>
</blockquote>
<p>使用一款第三方库的原因不外乎因为第三方库封装的好，使用方便，运行效率高。原本EventBus3.0的效率就比EventBus2.4、Otto的效率高，配合eventbus-annotation-processor的话更是在原来EventBus3.0的基础上效率高上一倍。<br>另外，假设我们的app需要在启动时进行网络请求，可是网络有延时，页面加载完成之后再更新UI的话会造成页面闪动，用户体验十分不好，所以我们一般会加一个启动页面，在这时候进行数据加载、网络请求等。当请求结束，得到数据之后跳转到主页面了，我们怎么把数据传递过去？Sticky Broadcast确实可以不过重量级了。所以我们需要有一个轻量级的解决方案。EventyBus就是这么一个轻量级的框架！</p>
<h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><blockquote>
<p>EventBus怎么用  </p>
</blockquote>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">        ......</span><br><span class="line">        compile 'org.greenrobot:eventbus:3.0.0'</span><br><span class="line">        provided 'de.greenrobot:eventbus-annotation-processor:3.0.0-beta1'</span><br><span class="line">    &#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">当然也可以直接在AS里查找，只需要输入EventBus就可以找到了。</span><br><span class="line">![image](http://upload-images.jianshu.io/upload_images/536961-cb8f976caea6ea29.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">## 注册</span><br><span class="line">当我们想使用EventBus去接收消息或者说订阅消息之前，我们必须对其进行注册。通常写在onCreate里：</span><br><span class="line">``` java</span><br><span class="line">   public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        EventBus.getDefault().register(this);</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="注销"><a href="#注销" class="headerlink" title="注销"></a>注销</h2><p>事物都是两面的，有注册就会有注销，注销写在onDestroy里：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.onDestroy();</span><br><span class="line">      EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">      ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>假设我们在网络通讯中获取到了数据，由于是异步处理，所以不能直接return，我们需要通过一个媒介把消息传递出去，EventBus开过来了。使用非常简单，只需要在想要发布消息的地方加上那么一句话：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().post(<span class="keyword">new</span> ListItemBus(list));</span><br></pre></td></tr></table></figure></p>
<p>其中消息一般为我们自己建的bean，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItemBus</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;FoodItem&gt; foodListItems;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListItemBus</span><span class="params">(List&lt;FoodItem&gt; foodListItems)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foodListItems = foodListItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;FoodItem&gt; <span class="title">getFoodListItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> foodListItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFoodListItems</span><span class="params">(List&lt;FoodItem&gt; foodListItems)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foodListItems = foodListItems;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>订阅也十分方便，在已注册的activity或者fragment中，新建方法如下（方法名可以随便取）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListEvent</span><span class="params">(ListItemBus listItemBus)</span> </span>&#123;</span><br><span class="line">      ......</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>EventBus是根据消息类来区分订阅者的，所以想不同的订阅者接收不同的消息需要不同的消息类，如上面的ListItemBus，我们可以把他改成String，当然发布放那边传的也要是String才行。  </p>
<h3 id="Subscribe注解"><a href="#Subscribe注解" class="headerlink" title="@Subscribe注解"></a>@Subscribe注解</h3><p>在Subscribe注解中，我们可以定义接收到消息之后的运行方式，优先级等。  </p>
<h4 id="threadMode"><a href="#threadMode" class="headerlink" title="threadMode"></a>threadMode</h4><p>定义执行线程，提供了4个方法：</p>
<ol>
<li>MAIN : 在UI线程中运行可以用于修改UI</li>
<li>BACKGROUND ：若当前线程非UI线程则在当前线程中执行，否则加入后台任务队列，使用线程池调用</li>
<li>ASYNC ：加入后台任务队列，使用线程池调用，一般用于网络请求</li>
<li>POSTING ：默认模式，会在发布的线程执行  </li>
</ol>
<h4 id="priority"><a href="#priority" class="headerlink" title="priority"></a>priority</h4><p>定义优先级，默认为0，数值越大，优先级越高：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN,priority = <span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListEvent</span><span class="params">(ListItemBus listItemBus)</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h4><p>文章开头的时候我说过，在启动页加载数据然后传递过去，可是假设启动画面需要持续3秒，而我数据1秒加载完了，这时候传递过去，由于订阅者还没有初始化，所以接收不到消息，这时候我们就需要使用到sticky了。使用方法同样很简单，只需要在想发布的地方把post换成postSticky：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EventBus.getDefault().postSticky(<span class="keyword">new</span> ListItemBus(list));</span><br></pre></td></tr></table></figure></p>
<p>订阅者那端也很方便，在@Subscribe注解中加入<code>sticky = true</code>即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Subscribe</span>(threadMode = ThreadMode.MAIN,sticky = <span class="keyword">true</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListEvent</span><span class="params">(ListItemBus listItemBus)</span> </span>&#123;</span><br><span class="line">     ......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我Boss说过一句话，我们不单要会用，还要知道他为什么这样用，这时候，我们就需要涉及源码了，我看到一篇挺好的EventBus3.0源码解析，大家可以看一下<a href="http://www.open-open.com/lib/view/open1473818425778.html" target="_blank" rel="external">EventBus 3.0进阶：源码及其设计模式 完全解析</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mongoose更新数据小技巧]]></title>
      <url>http://jcmels.github.io/2016/07/27/server-nodejs-mongoose-updatetips/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主之前使用的数据库一直都是SQL Server或者MySQL，最近接触了传说中的nosql–mongodb。咋一用觉得比起关系型数据库进行关联查询是麻烦，可是当看了mongoose api之后发现有个ref的东西的存在，建立关系骨架也不是太难。<br>然后跌跌撞撞基本的server都搭起来了，下午发现下载接口的更新下载量这个小功能没实现，按一般来讲下载一次是读取当前下载量，然后加1，可是因为懒，我就想有没有一种方法可以直接update的时候就加1，然后谷歌、看API。<br><a id="more"></a></p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>传说中的mongodb修改器–<code>$inc</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bookinfo.update(&#123;<span class="string">"_id"</span>:id&#125;,&#123;$inc:&#123;downloads:<span class="number">1</span>&#125;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(err) &#123;</span><br><span class="line">           <span class="built_in">console</span>.dir(err);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure></p>
<p>这段代码的意思是根据_id去修改downloads（数字型）数据，1为每次调用加1，若为﹣1，则每次调用减1。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[BRVAH小白笔记之分组篇]]></title>
      <url>http://jcmels.github.io/2016/07/27/android-BRVAH-section/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在公司做小项目，需要用到分组功能，一般来讲，可以使用listview嵌套gridview来实现，也可以用recyclerview来实现。博主试过使用listview嵌套gridview，实现是实现了，就是优化不到位，会掉帧。然后使用recyclerview，想了大半天做了出来，可是效果也不好。于是问了下能不能用第三方库，毕竟前段时间发现了<a href="www.recyclerview.org">BaseRecyclerViewAdapterHelper</a>（下文简称BRVAH）这个优秀的RecyclerViewAdapter高度定制开源库。结果得到了肯定，并且公司鼓励使用优秀的第三方开源库！然后！跟着我一起用吧！<br><a id="more"></a></p>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><p>依旧这个套路，这里先说下为什么要用BRVAH。</p>
<ol>
<li><p>节省大量代码（减少70%）</p>
<blockquote>
<p>重复代码，抽取到基类，非重复代码用抽象方法代替，具体让子类实现。</p>
</blockquote>
</li>
<li><p>添加了点击事件</p>
<blockquote>
<p>item点击、长按事件以及item子控件点击事件</p>
</blockquote>
</li>
<li><p>添加了加载动画</p>
<blockquote>
<p>一行代码轻松切换5种默认动画，采用策略模式，使你在添加自定义动画时随心应手。</p>
</blockquote>
</li>
<li><p>方便添加头部、尾部、下拉刷新、上拉加载</p>
<blockquote>
<p>简单到让你感觉回到Listview时代</p>
</blockquote>
</li>
<li><p>添加分组功能（本节讲解）</p>
<blockquote>
<p>随心定义分组头部</p>
</blockquote>
</li>
<li><p>方便自定义不同的item类型</p>
<blockquote>
<p>简单配置、无需重写额外方法</p>
</blockquote>
</li>
<li><p>方便设置空布局</p>
<blockquote>
<p>比Listview的setEmptyView还要好用！</p>
</blockquote>
</li>
<li><p>可以拖拽item并附带动画</p>
</li>
<li>滑动删除item</li>
</ol>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><p>说了那么多，那么如何使用呢？  </p>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>第三方库第一件事情肯定就是添加依赖了<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.3'</span><br></pre></td></tr></table></figure></p>
<h2 id="添加布局"><a href="#添加布局" class="headerlink" title="添加布局"></a>添加布局</h2><p>分组所需要两种item，一种是显示分组信息的，另一组是显示普通item的，所以创建两个layout。<br>分组信息Item(item_title.xml):<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span></span><br><span class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:card_view</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/card_view"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"50dip"</span></span><br><span class="line">    <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span><br><span class="line">    <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></span><br><span class="line">    <span class="attr">card_view:cardBackgroundColor</span>=<span class="string">"#ffffff"</span></span><br><span class="line">    <span class="attr">card_view:cardCornerRadius</span>=<span class="string">"4dp"</span></span><br><span class="line">    <span class="attr">card_view:cardElevation</span>=<span class="string">"2dp"</span></span><br><span class="line">    <span class="attr">card_view:cardUseCompatPadding</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/tv_item_title"</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span><br><span class="line">        <span class="attr">android:text</span>=<span class="string">"java初级"</span></span><br><span class="line">        <span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span><br><span class="line">        <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceMedium"</span></span><br><span class="line">        <span class="attr">android:textSize</span>=<span class="string">"20dp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>非常简单的布局，就一个cardview包裹了一个textview调整下布局就行。<br>普通Item（item_cardview.xml）：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.CardView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"4dp"</span></span><br><span class="line">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"4dp"</span></span><br><span class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"4dp"</span></span><br><span class="line">    <span class="attr">android:layout_marginTop</span>=<span class="string">"4dp"</span></span><br><span class="line">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span><br><span class="line">    <span class="attr">android:clickable</span>=<span class="string">"true"</span></span><br><span class="line">    <span class="attr">android:foreground</span>=<span class="string">"?android:attr/selectableItemBackground"</span></span><br><span class="line">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span><br><span class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span><br><span class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">        <span class="attr">android:layout_margin</span>=<span class="string">"1dp"</span></span><br><span class="line">        <span class="attr">android:background</span>=<span class="string">"#ffffff"</span></span><br><span class="line">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span><br><span class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.facebook.drawee.view.SimpleDraweeView</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/cv_img"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"150dp"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></span><br><span class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span><br><span class="line">            <span class="attr">android:padding</span>=<span class="string">"8dp"</span></span><br><span class="line">            <span class="attr">app:actualImageScaleType</span>=<span class="string">"centerCrop"</span></span><br><span class="line">            <span class="attr">app:placeholderImage</span>=<span class="string">"@drawable/book"</span></span><br><span class="line">            /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span><br><span class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/cv_nameTv"</span></span><br><span class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span><br><span class="line">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span><br><span class="line">            <span class="attr">android:ellipsize</span>=<span class="string">"end"</span></span><br><span class="line">            <span class="attr">android:maxEms</span>=<span class="string">"8"</span></span><br><span class="line">            <span class="attr">android:paddingBottom</span>=<span class="string">"4dp"</span></span><br><span class="line">            <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span><br><span class="line">            <span class="attr">android:text</span>=<span class="string">"疯狂android"</span></span><br><span class="line">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v7.widget.CardView</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>同样是简单的布局，cardview包裹了一个线性布局，里面有放图片的simpleDraweeView(fresco)和一个textview。<br>PS:这里有个小技巧，调整布局的时候可以先放图片进去试试。</p>
<h2 id="添加实体类"><a href="#添加实体类" class="headerlink" title="添加实体类"></a>添加实体类</h2><p>这里需要有两个类，一个是存放普通item数据的，另一个是存放分组信息的。<br>普通item实体类（BookInfo）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String bookname;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String booktype;</span><br><span class="line">    <span class="keyword">private</span> String summary;</span><br><span class="line">    <span class="keyword">private</span> String imageurl;</span><br><span class="line">    <span class="keyword">private</span> String zipurl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> downloads;</span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"><span class="comment">//这里省略get、set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分组item实体类（MySection）:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySection</span> <span class="keyword">extends</span> <span class="title">SectionEntity</span>&lt;<span class="title">BookInfo</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySection</span><span class="params">(BookInfo bookInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(bookInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySection</span><span class="params">(<span class="keyword">boolean</span> isHeader, String header)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(isHeader, header);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="添加Adapter"><a href="#添加Adapter" class="headerlink" title="添加Adapter"></a>添加Adapter</h2><p>分组功能的实现靠的就是Adapter根据不同的type使用不同的item布局来实现的，但由于BaseSectionQuickAdapter写了这部分的方法，我们不需要写，只需要继承就可以了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SectionAdapter</span> <span class="keyword">extends</span> <span class="title">BaseSectionQuickAdapter</span>&lt;<span class="title">MySection</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SectionAdapter</span><span class="params">(<span class="keyword">int</span> layoutResId, <span class="keyword">int</span> sectionHeadResId, List&lt;MySection&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(layoutResId, sectionHeadResId, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convertHead</span><span class="params">(BaseViewHolder baseViewHolder, MySection mySection)</span> </span>&#123;</span><br><span class="line">        baseViewHolder.setText(R.id.tv_item_title, mySection.header);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(BaseViewHolder baseViewHolder, MySection mySection)</span> </span>&#123;</span><br><span class="line">        BookInfo bookInfo = mySection.t;</span><br><span class="line">        SimpleDraweeView simpleDraweeView = baseViewHolder.getView(R.id.cv_img);</span><br><span class="line">        Uri uri = Uri.parse(bookInfo.getImageurl());</span><br><span class="line">        Log.i(<span class="string">"test"</span>, <span class="string">"adapter"</span>);</span><br><span class="line">        simpleDraweeView.setImageURI(uri);</span><br><span class="line">        baseViewHolder.setText(R.id.cv_nameTv, bookInfo.getBookname());</span><br><span class="line">		<span class="comment">//这里可以对你的普通item进行set资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="创建数据服务类"><a href="#创建数据服务类" class="headerlink" title="创建数据服务类"></a>创建数据服务类</h2><p>为什么要创建数据服务类，为了管理方便，需要修改数据获取方式的时候直接修改这个类就行了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line">    <span class="keyword">public</span> List&lt;BookSubject&gt; SubjectList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> String title = <span class="string">"null"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据subject获取数据  这里博主是在fragment中传了个值过来获取固定科目的书数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;MySection&gt; <span class="title">getSectionData</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;MySection&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        AsyncHttpClient client = <span class="keyword">new</span> AsyncHttpClient();</span><br><span class="line">        client.get(<span class="string">"http://192.168.199.152:8088/getbookinterface/"</span>+subject, <span class="keyword">new</span> AsyncHttpResponseHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] responseBody)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">byte</span>[] data = responseBody;</span><br><span class="line">                String s = <span class="keyword">new</span> String(data);</span><br><span class="line">                jsonArray = JSON.parseArray(s);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; jsonArray.size(); i++) &#123;</span><br><span class="line">                    BookInfo bookInfo = <span class="keyword">new</span> BookInfo();</span><br><span class="line">                    JSONObject jsonObject = jsonArray.getJSONObject(i);</span><br><span class="line">                    bookInfo = JSON.toJavaObject(jsonObject, BookInfo.class);</span><br><span class="line">                    System.out.println(bookInfo.getBookname());</span><br><span class="line">                    <span class="keyword">if</span> (!bookInfo.getGrade().equals(title)) &#123;</span><br><span class="line">                        title = bookInfo.getGrade();</span><br><span class="line">                        list.add(<span class="keyword">new</span> MySection(<span class="keyword">true</span>, bookInfo.getGrade()));</span><br><span class="line">                        list.add(<span class="keyword">new</span> MySection(bookInfo));</span><br><span class="line">                    &#125; <span class="keyword">else</span> list.add(<span class="keyword">new</span> MySection(bookInfo));</span><br><span class="line">                &#125;</span><br><span class="line">                EventBus.getDefault().post(<span class="keyword">new</span> BookBus(list));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="keyword">int</span> statusCode, Header[] headers, <span class="keyword">byte</span>[] responseBody, Throwable error)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>由于是异步获取服务器数据，所以return List肯定是获取不到数据的，因为还没dataserver还没获取完数据就已经被返回了。这里博主用了EventBus（线程通讯神器）把获取完成后的数据传到了fragment中（EventBus使用方法网上也有，或者可以看我稍后的博客）。</p>
<h2 id="绑定Adapter"><a href="#绑定Adapter" class="headerlink" title="绑定Adapter"></a>绑定Adapter</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SectionList = dataServer.getSectionData(subject);<span class="comment">//获取数据</span></span><br><span class="line">sectionAdapter = <span class="keyword">new</span> SectionAdapter(R.layout.item_cardview, R.layout.item_title, SectionList);</span><br><span class="line">        sectionAdapter.setOnRecyclerViewItemClickListener(<span class="keyword">this</span>);</span><br><span class="line">        sectionAdapter.setOnRecyclerViewItemChildClickListener(<span class="keyword">new</span> BaseQuickAdapter.OnRecyclerViewItemChildClickListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemChildClick</span><span class="params">(BaseQuickAdapter baseQuickAdapter, View view, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                Toast.makeText(getActivity(), <span class="string">"你点击了child"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        sectionAdapter.openLoadAnimation();</span><br><span class="line">recyclerview.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">2</span>, StaggeredGridLayoutManager.VERTICAL));</span><br><span class="line">        recyclerview.setAdapter(sectionAdapter);</span><br></pre></td></tr></table></figure>
<p>由于数据是通过EventBus坐Bus过来的，所以可能慢一点，当数据到达时，刷新一次就行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SectionList = bookBus.getBookInfoList();</span><br><span class="line">      sectionAdapter.setNewData(SectionList);</span><br></pre></td></tr></table></figure></p>
<p>好了打完收工！<br>成功图：<br><img src="http://ww4.sinaimg.cn/large/6faa9679gw1f68uw0zum1j20c80m3tau.jpg" alt=""></p>
<h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>这一趴直接转作者（陈哥）的博客，当然也可以看原文–<a href="http://www.jianshu.com/p/87a49f732724" target="_blank" rel="external">http://www.jianshu.com/p/87a49f732724</a><br>其实头部和内容部分就是通过不同的type来实现的，我们可以查看BaseSectionQuickAdapter源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getDefItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((SectionEntity) mData.get(position)).isHeader ? SECTION_HEADER_VIEW : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p>它是通过<code>SectionEntity</code>的<code>isHeader</code>属性来区别是否是头部的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SectionEntity</span>&lt;<span class="title">T</span>&gt; </span>&#123;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isHeader;    </span><br><span class="line">    <span class="keyword">public</span> T t;    </span><br><span class="line">    <span class="keyword">public</span> String header;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SectionEntity</span><span class="params">(<span class="keyword">boolean</span> isHeader, String header)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.isHeader = isHeader;        </span><br><span class="line">        <span class="keyword">this</span>.header = header;        </span><br><span class="line">        <span class="keyword">this</span>.t = <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SectionEntity</span><span class="params">(T t)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.isHeader = <span class="keyword">false</span>;        </span><br><span class="line">        <span class="keyword">this</span>.header = <span class="keyword">null</span>;        </span><br><span class="line">        <span class="keyword">this</span>.t = t;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这就是为什么要求开发者的实体类必须继承<code>SectionEntity</code>的原因了，因为需要通过它的<code>isHeader</code>这个属性来改变<code>type</code>，<code>onCreateViewHolder</code>通过不同的<code>type</code>来加载不同的布局。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> BaseViewHolder <span class="title">onCreateDefViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (viewType == SECTION_HEADER_VIEW)        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseViewHolder(getItemView(mSectionHeadResId, parent));    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateDefViewHolder(parent, viewType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在<code>onBindViewHolder</code>里面通过type来区分头部和内容部分调用不同的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(BaseViewHolder holder, Object item)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">switch</span> (holder.getItemViewType()) &#123;        </span><br><span class="line">        <span class="keyword">case</span> SECTION_HEADER_VIEW:            </span><br><span class="line">        setFullSpan(holder);            </span><br><span class="line">        convertHead(holder, (T) item);            </span><br><span class="line">        <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">        convert(holder, (T) item);            </span><br><span class="line">        <span class="keyword">break</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">convertHead</span><span class="params">(BaseViewHolder helper, T item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(BaseViewHolder helper, T item)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><code>setFullSpan</code>是填充一行的方法，因为要考虑到多种LayoutManager的情况。</p>
<blockquote>
<p>如果还什么疑问都可以在这里进行提问 <a href="http://www.diycode.cc/topics/197" target="_blank" rel="external">因为开源项目和技术分享收到 Google 的面试邀请，大家有什么想要讨论的么？</a></p>
</blockquote>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>陈哥真的是个很nice的人，技术好，人更好，问问题都会回答，还会在群里和我们交流。BRVAH也是个超级方便的recyclerviewAdapter开源库！陈哥拿到谷歌的面试邀请，在此祝陈哥面试成功。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NavigationView之动态添加MenuItem]]></title>
      <url>http://jcmels.github.io/2016/07/22/android-NavigationView-addMenu/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>NavigationView是一个侧滑菜单的官方库，没记错的话它跟recyclerview一样自从Android5.0退出之后就诞生了。所以教程有很多，这里贴一个我觉得很好的一篇教程，毕竟刚刚给了我思路动态添加item：<a href="http://blog.30sparks.com/material-design-1-navigation-drawer/" target="_blank" rel="external">Material Design Patterns 教學 (1) - Navigation Drawer</a>。博主好像是香港人，不过繁中也能看懂。国内能搜索到的教程几乎都是在XML里绑定了menu.xml，<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:menu="@menu/activity_main_drawer"</span><br></pre></td></tr></table></figure></p>
<p>不过这也正常毕竟侧滑菜单不会经常更新，所以一般都不会写个专门的教程去动态添加item。<br><a id="more"></a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近在做小项目，需要动态更新NavigationView的MenuItem，按照一般的思路就是get到它的View之后再进行操作，可是一直没找到getView的方法，直到Google看了<a href="http://blog.30sparks.com/material-design-1-navigation-drawer/" target="_blank" rel="external">Material Design Patterns 教學 (1) - Navigation Drawer</a>的评论，想起来看Android的API文档，结果就找到解决方法了。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>遇到问题还是Google吧。。。废话太多。。上解决方法！</p>
<pre><code class="java">navigationView.setNavigationItemSelectedListener(<span class="keyword">this</span>);
      navigationView.getMenu().add(<span class="string">"我是后加的"</span>).setIcon(R.drawable.collect).setOnMenuItemClickListener(<span class="keyword">new</span> MenuItem.OnMenuItemClickListener() {
          <span class="meta">@Override</span>
          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onMenuItemClick</span><span class="params">(MenuItem item)</span> </span>{
              Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"你点击我了"</span>,Toast.LENGTH_SHORT).show();
                   <span class="comment">//在这写点击之后的处理</span>
              <span class="keyword">return</span> <span class="keyword">true</span>;
          }
      });
</code></pre>
<p>我们看一下官方的API文档是怎么说的<br><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f632cnuj7rj20r505twey.jpg" alt=""><br>就是说<code>navigationView.getMenu()</code>获取到Menu这个View实例，再add MenuItem就行了，<code>setOnMenuItemClickListener</code>就是对这个item设监听事件。<br>成果图：<img src="http://ww4.sinaimg.cn/large/6faa9679gw1f632oup2gnj20a10gpmxv.jpg" alt="">  </p>
<p>不过目前还有一点有问题的就是不能动态给MenuItem添加icon，等项目做完了再研究下怎么动态加icon。</p>
<p><font color="#FF4500" size="5" face="黑体">更新：给MenuItem添加Icon只需要在add之后setIcon就行，代码已更新！</font></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>由于项目的server也要我们自己完成，然后我就开始了疯狂查资料模式，毕竟之前一直没接触node.js（hexo是例外）,很多东西百度都很少资料，而且都是好几年前的，仗着有点SSH的基础（虽然跟node.js一点关系都没）和对MVC的了解，大概把server给搭了起来，期间Google帮了好多忙！所以能Google的就别Baidu了。。。  </p>
<p>PS:后期若找到动态更新icon的话会第一时间更新Blog！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[图片加载利器-Fresco入门篇]]></title>
      <url>http://jcmels.github.io/2016/07/16/android-fresco1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前一直用的是Android-Universal-Image-Loader或者Picasso的库，很好用，不过有时候也会出现OOM，这次做的一个小项目要求我们使用Fresco，这个库之前听过是Facebook公司开发的，但一直没去使用，这次有机会使用了一下，咦还挺好用的，虽然官方翻译的文档很清晰明了，不过还是做一下记录，大部分搬自<a href="http://www.fresco-cn.org/docs/" target="_blank" rel="external">Fresco 中文文档</a>。<br><a id="more"></a></p>
<h1 id="Fresco简介"><a href="#Fresco简介" class="headerlink" title="Fresco简介"></a>Fresco简介</h1><p>Fresco是Facebook公司开发的一款强大的图片加载组件，是现今为止我用过最方便的图片加载组件没有之一。<br>要知道手机内存十分有限，特别是安卓手机，各种流氓APP占用着RAM导致可用内存十分有限，图片不进行管理很容易OOM，所以图片的内存管理十分重要，于是有了各种各样的图片缓存组件，Facebook公司开发了Fresco库来解决这个问题。</p>
<h1 id="Fresco特性"><a href="#Fresco特性" class="headerlink" title="Fresco特性"></a>Fresco特性</h1><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><blockquote>
<p>解压后的图片，即Android中的Bitmap，占用大量的内存。大的内存占用势必引发更加频繁的GC。在5.0以下，GC将会显著地引发界面卡顿。</p>
<p>在5.0以下系统，Fresco将图片放到一个特别的内存区域。当然，在图片不显示的时候，占用的内存会自动被释放。这会使得APP更加流畅，减少因图片内存占用而引发的OOM。</p>
<p>Fresco 在低端机器上表现一样出色，你再也不用因图片内存占用而思前想后。</p>
</blockquote>
<h2 id="图片的渐进式呈现"><a href="#图片的渐进式呈现" class="headerlink" title="图片的渐进式呈现"></a>图片的渐进式呈现</h2><blockquote>
<p>渐进式的JPEG图片格式已经流行数年了，渐进式图片格式先呈现大致的图片轮廓，然后随着图片下载的继续，呈现逐渐清晰的图片，这对于移动设备，尤其是慢网络有极大的利好，可带来更好的用户体验。</p>
<p>Android 本身的图片库不支持此格式，但是Fresco支持。使用时，和往常一样，仅仅需要提供一个图片的URI即可，剩下的事情，Fresco会处理。</p>
</blockquote>
<h2 id="Gif图和WebP格式"><a href="#Gif图和WebP格式" class="headerlink" title="Gif图和WebP格式"></a>Gif图和WebP格式</h2><blockquote>
<p>是的，支持加载Gif图，支持WebP格式。</p>
</blockquote>
<h2 id="图像的呈现"><a href="#图像的呈现" class="headerlink" title="图像的呈现"></a>图像的呈现</h2><blockquote>
<p>Fresco 的 Drawees 设计，带来一些有用的特性：</p>
<ul>
<li>自定义居中焦点(对人脸等图片显示非常有帮助)</li>
<li>圆角图，当然圆圈也行。</li>
<li>下载失败之后，点击重现下载</li>
<li>自定义占位图，自定义overlay, 或者进度条</li>
<li>指定用户按压时的overlay</li>
</ul>
</blockquote>
<h2 id="图像的加载"><a href="#图像的加载" class="headerlink" title="图像的加载"></a>图像的加载</h2><blockquote>
<p>Fresco 的 image pipeline 设计，允许用户在多方面控制图片的加载：</p>
</blockquote>
<ul>
<li>为同一个图片指定不同的远程路径，或者使用已经存在本地缓存中的图片</li>
<li>先显示一个低解析度的图片，等高清图下载完之后再显示高清图</li>
<li>加载完成回调通知</li>
<li>对于本地图，如有EXIF缩略图，在大图加载完成之前，可先显示缩略图</li>
<li>缩放或者旋转图片</li>
<li>处理已下载的图片</li>
<li>WebP 支持<h1 id="引入Fresco"><a href="#引入Fresco" class="headerlink" title="引入Fresco"></a>引入Fresco</h1><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2>目前大多数开发者应该都转战Android Studio（下文简称AS），在AS中引入库十分的方便只需要在Gradle中添加dependencies就行  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">     compile &apos;com.facebook.fresco:fresco:0.9.0+&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="ADT"><a href="#ADT" class="headerlink" title="ADT"></a>ADT</h2><p>在ADT中引入比较麻烦，首先，下载<a href="https://github.com/facebook/fresco/releases/download/v0.9.0/frescolib-v0.9.0.zip" target="_blank" rel="external">这个文件</a>.</p>
<p>解压后，你会看到一个目录：frescolib，注意这个目录。</p>
<ol>
<li>从菜单 “文件(File)”，选择导入(Import)</li>
<li>展开 Android, 选择 “Existing Android Code into Workspace”， 下一步。</li>
<li>浏览，选中刚才解压的的文件中的 frescolib 目录。</li>
<li>这5个项目应该都会被添加到工程： drawee， fbcore， fresco， imagepipeline， imagepipeline-okhttp。请确认前4个项目一定是被选中的。点击完成。</li>
<li>右键，项目，选择属性，然后选择 Android。</li>
<li>点击右下角的 Add 按钮，选择 fresco，点击 OK，再点击 OK。</li>
</ol>
<p>现在，fresco 就导入到项目中了，你可以开始编译了。如果编译不通过，可以尝试清理资源，或者重启 Eclipse。</p>
<p>如果 support-v4 包重复了，删掉 frescolib/imagepipeline/libs 下的即可。</p>
<p>==建议尽早使用 Android Studio。==</p>
<h1 id="hello-SimpleDraweeView"><a href="#hello-SimpleDraweeView" class="headerlink" title="hello SimpleDraweeView"></a>hello SimpleDraweeView</h1><p>在我们学习编程的时候，一般第一个程序都是hello world，这是一句神奇的话，代表你写出了第一个程序。在Fresco中，第一个简单的成品是用SimpleDraweeView来显示一张网络图片，并在下载完成前显示一张占位图。</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>Fresco最基础的功能：从网上下载一幅图并显示出来，而从网上获取图片，必要的一个权限就是网络权限。<br>在AndroidManifest.xml中添加</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>在应用初始化时，在调用setContentView() 之前，进行初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fresco.initialize(context);</span><br></pre></td></tr></table></figure>
<h2 id="添加布局控件"><a href="#添加布局控件" class="headerlink" title="添加布局控件"></a>添加布局控件</h2><p>在xml布局文件中, 加入命名空间：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 其他元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> </span><br><span class="line">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attr">xmlns:fresco</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>加入SimpleDraweeView:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.facebook.drawee.view.SimpleDraweeView</span></span><br><span class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/my_image_view"</span></span><br><span class="line">    <span class="attr">android:layout_width</span>=<span class="string">"20dp"</span></span><br><span class="line">    <span class="attr">android:layout_height</span>=<span class="string">"20dp"</span></span><br><span class="line">    <span class="attr">fresco:placeholderImage</span>=<span class="string">"@drawable/my_drawable"</span> //占位图</span><br><span class="line">  /&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(<span class="string">"https://raw.githubusercontent.com/rudsonlive/NavigationDrawer-MaterialDesign/master/Screenshot/Screenshot_01.png"</span>);</span><br><span class="line">SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);</span><br><span class="line">draweeView.setImageURI(uri);</span><br></pre></td></tr></table></figure>
<p>剩下的下载图片啊、缓存图片啊、内存管理啊都交给fresco就对了！</p>
<h1 id="概念说明"><a href="#概念说明" class="headerlink" title="概念说明"></a>概念说明</h1><h2 id="Drawees"><a href="#Drawees" class="headerlink" title="Drawees"></a>Drawees</h2><blockquote>
<p>Drawees 负责图片的呈现，包含几个组件，有点像MVC模式。</p>
</blockquote>
<h2 id="DraweeView"><a href="#DraweeView" class="headerlink" title="DraweeView"></a>DraweeView</h2><blockquote>
<p>继承于 View, 负责图片的显示。<br>一般情况下，使用SimpleDraweeView即可.</p>
</blockquote>
<h2 id="DraweeHierarchy"><a href="#DraweeHierarchy" class="headerlink" title="DraweeHierarchy"></a>DraweeHierarchy</h2><blockquote>
<p>DraweeHierarchy 用于组织和维护最终绘制和呈现的Drawable对象，相当于MVC中的M。</p>
</blockquote>
<p>如果你想在Java代码中自定义图片的展示，可以通过这类实现,后续会讲。</p>
<h2 id="DraweeController"><a href="#DraweeController" class="headerlink" title="DraweeController"></a>DraweeController</h2><blockquote>
<p>DraweeController 负责和 image loader 交互（默认是Fresco中 image pipeline），可以创建一个这个类的实例，来实现对所要显示的图片做更多的控制。</p>
</blockquote>
<h2 id="DraweeControllerBuilder"><a href="#DraweeControllerBuilder" class="headerlink" title="DraweeControllerBuilder"></a>DraweeControllerBuilder</h2><blockquote>
<p>DraweeControllers 由 DraweeControllerBuilder 采用 Builder 模式创建，创建之后，不可修改。</p>
</blockquote>
<h2 id="Listeners"><a href="#Listeners" class="headerlink" title="Listeners"></a>Listeners</h2><blockquote>
<p>使用 ControllerListener 的一个场景就是设置一个 Listener监听图片的下载。</p>
</blockquote>
<h2 id="Image-Pipeline"><a href="#Image-Pipeline" class="headerlink" title="Image Pipeline"></a>Image Pipeline</h2><blockquote>
<p>Fresco 的 Image Pipeline 负责图片的获取和管理。图片可以来自远程服务器，本地文件，或者Content Provider，本地资源。压缩后的文件缓存在本地存储中，Bitmap数据缓存在内存中。</p>
</blockquote>
<h2 id="ImageRequest"><a href="#ImageRequest" class="headerlink" title="ImageRequest"></a>ImageRequest</h2><blockquote>
<p>ImageRequest存储着Image Pipeline处理被请求图片所需要的有用信息(Uri、是否渐进式图片、是否返回缩略图、缩放、是否自动旋转等)。  </p>
</blockquote>
<h1 id="支持的URI"><a href="#支持的URI" class="headerlink" title="支持的URI"></a>支持的URI</h1><p>Fresco 不支持 相对路径的URI. 所有的URI都必须是绝对路径，并且带上该URI的scheme。</p>
<table>
<thead>
<tr>
<th>图片类型</th>
<th>Scheme</th>
</tr>
</thead>
<tbody>
<tr>
<td>远程图片</td>
<td>http:// OR https://</td>
</tr>
<tr>
<td>本地文件</td>
<td>file://</td>
</tr>
<tr>
<td>Content provider</td>
<td>content://</td>
</tr>
<tr>
<td>asset</td>
<td>asset://</td>
</tr>
<tr>
<td>res</td>
<td>res://</td>
</tr>
</tbody>
</table>
<p>PS:ShapeDrawable这样声明在XML中的drawable可能引起困惑。毕竟它不是图片，如果想把这样的drawable作为图像显示。那么把这个drawable设置为占位图，然后把URI设置为null。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取RecyclerView中的控件之踩坑篇]]></title>
      <url>http://jcmels.github.io/2016/07/16/android-recycleview-tips/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>RecyclerView跟随Android5.0发布已久了，几乎从RecyclerView问世之初，我就抛弃ListView和GridView转投RecyclerView的怀抱了！没啥原因，只因为方便、省心。如它名字所示Recycler+View，代表着它拥有良好的回收机制以及良好的复用能力，而且强制使用了ViewHolder所以性能不用担心。当我们想要添加增删动画时，只需要通过ItemAnimator，一条语句就能解决。ListView？GridView？瀑布流？一条语句快速切换。叫我怎能不爱。然而。。。谷歌这次没赋予它点击事件，这意味着需要自己写点击事件，不过也不难，通过adapter提供回调就行，事件监听器从recyclerview换成了Adapter而已。一切都那么美好，直到今天下午。。。<br><a id="more"></a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近在做一个小项目，在点击item时更新item的UI，这个一般来讲就是获取到View然后在绑定控件，做相应的修改就行，也就一、两条语句的事嘛。好了怎么获取对应的View呢，根据ListView的经验，恩，<code>recycleview.getChildAt(position)</code>就行了吧！刚开始只有4条数据的时候确实就这样就行了，当数据多了，屏幕显示不完，拉下去点击之前未显示的就Crash了。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>前言说了RecyclerView有良好的回收机制，所以只加载屏幕显示的View，未显示部分将回收。由于<code>getChildAt()</code>这个方法只能get到屏幕显示的部分，也就是说：假如屏幕上只能显示6个View，当往下滑动到第7、8个View的时候，他们的position虽然还是6，7但是由于<code>getChildAt（）</code>只能get到屏幕上显示的View，所以它实际的position其实是4、5。想要get到第7个View不能用getChildAt（6）而要用getChildAt（4）.其实这问题之前在ListView中也出现过，不过只需要用当前的position减去屏幕显示的第一个View的position（<code>getFirstVisiblePosition()</code>）就行。然而recyclerview中并没有获取第一个View的方法。好了百度、谷歌找了一大圈，最后在stackoverflow找到了相关描述，据说只需要这样<code>((LinearLayoutManager)LayoutManager).findFirstVisibleItemPosition()</code>或者这样<code>(（GridLayoutManager）LayoutManager).findFirstVisibleItemPosition()</code>就行了。然而。。。我用的瀑布流<code>StaggeredGridLayoutManager</code>。StaggeredGridLayoutManager中的这个方法需要传入一个int[]，然后懵逼，然后又是一大圈的趴文，然后依然是在stackoverflow中找到了相关描述，据说这是谷歌的bug，只能绕一绕，结果真的只是绕一绕，废话太多了直接上代码吧。。。</p>
<pre><code class="java"><span class="keyword">int</span>[] firstVisibleItems = <span class="keyword">null</span>;

firstVisibleItems=  ((StaggeredGridLayoutManager)recycleview.getLayoutManager()).findFirstVisibleItemPositions(firstVisibleItems);
</code></pre>
<p>真的是很绕对吧？最终数组中第1个元素就是所要的第一个position，下标0.所以获取当前view的真实Position就是position - firstVisibleItems[0]。<br>好了此贴终结。。。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>真的强烈安利stackoverflow，几乎所有神奇的问题都可以从这趴到解决方案，虽然全英，不过技术问答看懂不难。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github搭个人博客第二章--部署到Github]]></title>
      <url>http://jcmels.github.io/2016/07/11/hexo4/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经过前几篇教程的学习，我们已经可以在本地搭建起hexo的环境了，可怎么把它放进互联网中让所有人都可以看到呢？这里我提供一个简单、免费的方法！–Github！<br><a id="more"></a></p>
<h1 id="新建代码仓库"><a href="#新建代码仓库" class="headerlink" title="新建代码仓库"></a>新建代码仓库</h1><p>首先如果没注册github账号的话需要注册一个账号，因为需要把hexo部署到github的仓库里，这样就不需要自己租服务器了。(已有账号的跳过)</p>
<h2 id="注册Github"><a href="#注册Github" class="headerlink" title="注册Github"></a>注册Github</h2><p><a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>先注册，然后登陆github。  </p>
<h2 id="建代码仓库"><a href="#建代码仓库" class="headerlink" title="建代码仓库"></a>建代码仓库</h2><p><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f5v0iqdafcj208n016aa0.jpg" alt=""><br>找到这个，new一个repository<br><img src="http://ww4.sinaimg.cn/large/6faa9679gw1f5v0jpha2jj20l30fz418.jpg" alt=""><br>创建的时候只需要填写repository 那么就行了，但格式必须为XXXXX.github.io。<br><img src="http://ww4.sinaimg.cn/large/6faa9679gw1f5v0kc1olyj20oq0jntdr.jpg" alt=""><br>这样表示你创建成功了。  </p>
<h1 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h1><p>接下来我们需要改一下配置文件，找到你的hexo文件夹，打开_config.yml文件，建议使用ATOM打开，一个很方便的文本编译器。<br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f5v0lzj7lfj20r60kl783.jpg" alt="">在最下面添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: https://github.com/JcmeLs/jcmels.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></p>
<p><font color="#FF4500" size="5" face="黑体">如果hexo是3.0之后的直接在type那填git，之前的版本type填你的github用户名，repository填你刚刚建立的仓库地址。</font><br>保存。</p>
<h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1><p>然后我们会用到SSH，如果没有配置过的话需要先进行配置，如何查询是否配置了？还是打开我们的git bash here输入<code>ls -al ~/.ssh</code><br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f5v0r8wnfjj20gj095js8.jpg" alt=""><br>如果出现这个就是没配置。</p>
<h2 id="获取key"><a href="#获取key" class="headerlink" title="获取key"></a>获取key</h2><p>在git bash输入<code>ssh-keygen -t rsa -C &quot;243276652@qq.com&quot;</code>邮箱写你注册github时填的邮箱，然后会要你按三次回车。<br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f5v0scdlhgj20dg083gnu.jpg" alt=""><br>接着输入<code>ssh-agent -s</code><br><img src="http://ww1.sinaimg.cn/large/6faa9679gw1f5v0t389hbj20dt01xdga.jpg" alt=""><br>继续输入<code>ssh-add ~/.ssh/id_rsa</code><br>如果报错<img src="http://ww1.sinaimg.cn/large/6faa9679gw1f5v0u59ga6j20cb01ewem.jpg" alt=""><br>输入</p>
<blockquote>
<p>eval `ssh-agent -s</p>
</blockquote>
<pre><code>ssh-add
</code></pre><p><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f5v0wqo5cxj20di02oq3e.jpg" alt=""><br>这样你就可以添加SSH 可以进你的github里了<br>通过</p>
<blockquote>
<p>clip &lt; ~/.ssh/id_rsa.pub</p>
</blockquote>
<p>获取key</p>
<h2 id="填写key"><a href="#填写key" class="headerlink" title="填写key"></a>填写key</h2><p>获取到的key存在剪切板，在Github里面，点击右上角的设置图标Settings,<br><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f5v0xilzyqj207i095jro.jpg" alt=""><br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f5v0ybj4wqj206x0d53z5.jpg" alt=""><br>找到SSH keys,<br><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f5v0z3kvyej20kz0a6q5o.jpg" alt=""><br>Ttile随便你命名，Key就黏贴上你刚才复制的key,然后点Add SSH key，<br>最后会让你重新输入下gitHub的密码<br>让我们测试下SSH有没有配置成功在git bash里输入<code>ssh -T git@github.com</code>，会出现警告，没关系输入yes，<br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f5v10f29kij20fo02zdh7.jpg" alt=""><br>出现这个证明你成功了</p>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>输入</p>
<blockquote>
<p>hexo g<br>hexo d<br>把网站部署到Github<br>如果报错则</p>
</blockquote>
<pre><code>npm install hexo-deployer-git --save
</code></pre><p>再<code>hexo d</code><br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f5v17nf0jaj20gi0cl0vr.jpg" alt=""><br>看到这个你就成功了<br>快去你刚刚填写的域名访问吧！比如<a href="http://jcmels.github.io">jcmels.github.io</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github搭个人博客第一章--更换主题]]></title>
      <url>http://jcmels.github.io/2016/07/11/hexo3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个漂亮的博客是每个技术宅的梦想，所以选择了高定制的独立博客之路。可是landscape主题还是有点简单，所以需要更换主题，hexo目前有大量的优秀主题，比如jacman、NexT的三套等等。本次教程交大家替换主题，具体主题配置可以根据文档调试。后期也会根据NexT的展开，不过基本上也是照搬文档。<br><a id="more"></a></p>
<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><p>打开git bash。<br>输入<code>git clone</code> 你想要的主题的GITHUB地址<br>如<code>git clone https://github.com/wuchong/jacman.git themes/jacman</code><br><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f5v0a0wicwj20fm03cabd.jpg" alt=""><br>然后用atom打开_config.yml文件找到theme属性设为jacman<br>更新主题<br><code>cd themes/jacman</code><br><code>git pull</code><br><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f5v0a6rif0j20ax02caaa.jpg" alt=""><br>现在可以预览一下了<br><code>hexo server -g</code><br>地址栏输入<code>http://localhost:4000/</code>是不是变样子了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[S:action标签向action传值]]></title>
      <url>http://jcmels.github.io/2016/06/07/java-web-SSH-jspToaction/</url>
      <content type="html"><![CDATA[<p>最近在写悠行的web端程序，我们选用的是SSH框架，从JSP传值到Action中是经常要干的事，常用的方法就是通过href调用action传值，当然也有种情况就是直接通过 <code>&lt;s:action&gt;</code>标签来传值，最近就使用它来传值，并遇到了问题。<br><a id="more"></a></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>传值最大的问题就是传过去的获取不到，这里我使用的是<code>&lt;s:param&gt;</code>标签，然后传值过去发现获取不到。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><blockquote>
<p><code>&lt;s:param &gt;&lt;/s:param&gt;</code>是以request方式的值的,而不是以参数传值 。</p>
</blockquote>
<p>所以request.getParameter(“”);会取不到值，我们需要通过request.getAttribute(“”)方式可以获取，而在action中要调用request.getAttribute的方法是<code>ServletActionContext.getRequest().getAttribute(&quot;&quot;).toString()</code></p>
<p>在jsp页面中当我们想要通过<code>&lt;s:action&gt;</code>标签传值的时候只需要在<code>&lt;s:action&gt;</code>标签内加个<code>&lt;s:param&gt;</code>标签，name为等下在getAttribute方法中的参数如，value为所需要传的值：  </p>
<pre><code class="jsp">&lt;s:action name="loadPropertyAction"&gt;
     &lt;s:param name="catalogName" value="#catalog.bikeTypeName"&gt;&lt;/s:param&gt;
&lt;/s:action&gt;
</code></pre>
<p>我这里是动态传值，用上面的迭代器获取到的值再传到另一个action中，在action中获取值的代码是  </p>
<pre><code class="java">catalogName= ServletActionContext.getRequest().getAttribute(<span class="string">"catalogName"</span>).toString();
</code></pre>
<blockquote>
<p>注意用于接收传值的对象需要在action中添加get，set方法！</p>
</blockquote>
<p>然后就可以做接下来的数据操作了，比如继续进行另一个查询。  </p>
<hr>
<p>博主最近好忙，也没什么时间更新博客，这篇短文也是因为bug找的烦躁才想起来记录的一个小技巧，暑假应该时间挺多的，到时候争取每天一更，目测大部分Android，小部分设计模式，小部分SSH，小部分PHP吧</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[<转>IDEA注册码]]></title>
      <url>http://jcmels.github.io/2016/05/26/IDEA/</url>
      <content type="html"><![CDATA[<p>IntelliJ IDEA是JetBrains公司的一款IDE，主要用于java。<br>同系列有用于Ruby的RubyMine、Python的PyCharm、JavaScript的WebStorm、PHP的PhpStorm等，而且都非常优秀，如果你打算采用的话可以给个小提示：idea+php插件即可变为PhpStorm、+python插件即可变为PyCharm等，装一个idea，在把需要的插件装上，可以在一个项目中同时支持多种开发语言。<br>这款IDE收费有点小贵，这里提供一下注册码（推荐正版）<br><a id="more"></a></p>
<h2 id="IDEA-2016-1"><a href="#IDEA-2016-1" class="headerlink" title="IDEA 2016.1"></a>IDEA 2016.1</h2><p><a href="http://idea.qinxi1992.cn" target="_blank" rel="external">http://idea.qinxi1992.cn</a></p>
<h2 id="English-Version"><a href="#English-Version" class="headerlink" title="English Version"></a>English Version</h2><p><a href="http://us.idea.lanyus.com" target="_blank" rel="external">http://us.idea.lanyus.com</a></p>
<h2 id="IDEA-15-0-2"><a href="#IDEA-15-0-2" class="headerlink" title="IDEA 15.0.2"></a>IDEA 15.0.2</h2><p><a href="http://idea.lanyus.com/" target="_blank" rel="external">http://idea.lanyus.com/</a>（网友赞助服务器）<br><a href="http://0.idea.lanyus.com" target="_blank" rel="external">http://0.idea.lanyus.com</a><br><a href="http://1.idea.lanyus.com" target="_blank" rel="external">http://1.idea.lanyus.com</a><br><a href="http://2.idea.lanyus.com" target="_blank" rel="external">http://2.idea.lanyus.com</a><br><a href="http://3.idea.lanyus.com" target="_blank" rel="external">http://3.idea.lanyus.com</a><br><a href="http://4.idea.lanyus.com" target="_blank" rel="external">http://4.idea.lanyus.com</a></p>
<h2 id="IDEA-15"><a href="#IDEA-15" class="headerlink" title="IDEA 15"></a>IDEA 15</h2><p><a href="http://15.idea.lanyus.com" target="_blank" rel="external">http://15.idea.lanyus.com</a></p>
<h2 id="IDEA-14"><a href="#IDEA-14" class="headerlink" title="IDEA 14"></a>IDEA 14</h2><p><a href="http://5.idea.lanyus.com" target="_blank" rel="external">http://5.idea.lanyus.com</a></p>
<p>注册码在线计算采用了rover12421大牛的方法。<br>另外我提供了License server注册方法，在注册时选择License server，填写<a href="http://idea.lanyus.com" target="_blank" rel="external">http://idea.lanyus.com</a>，点击OK，也可以成功注册，但是这样会在每次启动idea时都连接到<a href="http://idea.lanyus.com" target="_blank" rel="external">http://idea.lanyus.com</a>检查是否激活，不过这种方法不会因idea版本升级而出现无法获得注册码的问题。</p>
<blockquote>
<p>PS:本文为转载，原贴地址<a href="http://blog.lanyus.com/6.html" target="_blank" rel="external">http://blog.lanyus.com/6.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android常用库整理]]></title>
      <url>http://jcmels.github.io/2016/05/10/android-frame/</url>
      <content type="html"><![CDATA[<p>最近在写创业项目的Android APP，由于是快速开发，所以会用到一些现成的开源库，这里做一下汇总，方便大家和自己，免得下次用的时候还要到处找。<br><a id="more"></a></p>
<h1 id="系统框架"><a href="#系统框架" class="headerlink" title="系统框架"></a>系统框架</h1><hr>
<h2 id="1-网络请求"><a href="#1-网络请求" class="headerlink" title="1. 网络请求"></a>1. 网络请求</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/loopj/android-async-http" title="Android Async HTTP" target="_blank" rel="external">Android Async HTTP</a></td>
<td style="text-align:center">Android异步HTTP库</td>
</tr>
<tr>
<td><a href="https://github.com/koush/AndroidAsync" title="AndroidAsync" target="_blank" rel="external">AndroidAsync</a></td>
<td style="text-align:center">异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。</td>
</tr>
<tr>
<td><a href="https://github.com/square/okhttp" title="Okhttp" target="_blank" rel="external">Okhttp</a></td>
<td style="text-align:center">Http与Http/2的客户端</td>
</tr>
<tr>
<td><a href="https://github.com/square/retrofit" title="Retrofit" target="_blank" rel="external">Retrofit</a></td>
<td style="text-align:center">类型安全的Http客户端</td>
</tr>
<tr>
<td><a href="https://android.googlesource.com/platform/frameworks/volley" title="Volley" target="_blank" rel="external">Volley</a></td>
<td style="text-align:center">Google推出的Android异步网络请求框架和图片加载框架</td>
</tr>
</tbody>
</table>
<h2 id="2-网络解析"><a href="#2-网络解析" class="headerlink" title="2. 网络解析"></a>2. 网络解析</h2><ul>
<li>JSON解析</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/google/gson" title="Gson" target="_blank" rel="external">Gson</a></td>
<td style="text-align:center">一个Java序列化/反序列化库，可以将JSON和java对象互相转换</td>
</tr>
<tr>
<td><a href="https://github.com/codehaus/jackson" title="Jackson" target="_blank" rel="external">Jackson</a></td>
<td style="text-align:center">Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</td>
</tr>
</tbody>
</table>
<ul>
<li>HTML解析</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://sourceforge.net/projects/htmlparser/" title="Htmlparser" target="_blank" rel="external">Htmlparser</a></td>
<td style="text-align:center">解析单个独立html或嵌套html</td>
</tr>
<tr>
<td><a href="https://github.com/jhy/jsoup" title="Jsoup" target="_blank" rel="external">Jsoup</a></td>
<td style="text-align:center">一个以最好的DOM，CSS和jQuery解析html的库</td>
</tr>
</tbody>
</table>
<h2 id="3-图片加载"><a href="#3-图片加载" class="headerlink" title="3.图片加载"></a>3.图片加载</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" title="Android-Universal-Image-Loader" target="_blank" rel="external">Android-Universal-Image-Loader</a></td>
<td style="text-align:center">强大的加载，缓存，展示图片的库</td>
</tr>
<tr>
<td><a href="https://github.com/square/picasso" title="Picasso" target="_blank" rel="external">Picasso</a></td>
<td style="text-align:center">强大的图片下载与缓存的库</td>
</tr>
<tr>
<td><a href="https://github.com/facebook/fresco" title="Fresco" target="_blank" rel="external">Fresco</a></td>
<td style="text-align:center">管理图像和使用的内存的库</td>
</tr>
<tr>
<td><a href="https://github.com/bumptech/glide" title="Glide" target="_blank" rel="external">Glide</a></td>
<td style="text-align:center">图片加载和缓存的库</td>
</tr>
</tbody>
</table>
<h2 id="4-数据处理"><a href="#4-数据处理" class="headerlink" title="4.数据处理"></a>4.数据处理</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://sourceforge.net/projects/ormlite/files/releases/com/j256/ormlite/" title="Ormlite" target="_blank" rel="external">Ormlite</a></td>
<td style="text-align:center">JDBC和Android的轻量级ORM java包</td>
</tr>
<tr>
<td><a href="https://github.com/greenrobot/greenDAO" title="GreenDAO" target="_blank" rel="external">GreenDAO</a></td>
<td style="text-align:center">轻松将对象映射到SQLite数据库的ORM解决方案</td>
</tr>
</tbody>
</table>
<h2 id="5-图表处理"><a href="#5-图表处理" class="headerlink" title="5.图表处理"></a>5.图表处理</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/diogobernardino/WilliamChart" title="WilliamChart" target="_blank" rel="external">WilliamChart</a></td>
<td style="text-align:center">创建图表的Android库</td>
</tr>
<tr>
<td><a href="https://github.com/lecho/hellocharts-android" title="HelloCharts" target="_blank" rel="external">HelloCharts</a></td>
<td style="text-align:center">兼容性超高的Android图表库</td>
</tr>
</tbody>
</table>
<h2 id="6-后台处理"><a href="#6-后台处理" class="headerlink" title="6.后台处理"></a>6.后台处理</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/yigit/android-priority-jobqueue" title="Android Priority Job Queue" target="_blank" rel="external">Android Priority Job Queue</a></td>
<td style="text-align:center">专门为Android轻松调度任务的工作队列</td>
</tr>
</tbody>
</table>
<h2 id="7-响应式编程"><a href="#7-响应式编程" class="headerlink" title="7.响应式编程"></a>7.响应式编程</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/ReactiveX/RxAndroid" title="RxAndroid" target="_blank" rel="external">RxAndroid</a></td>
<td style="text-align:center">Android上的响应式扩展，在RxJava基础上添加了Android线程调度</td>
</tr>
<tr>
<td><a href="https://github.com/ReactiveX/RxJava" title="RxJava" target="_blank" rel="external">RxJava</a></td>
<td style="text-align:center">JVM上的响应式扩展</td>
</tr>
<tr>
<td><a href="https://github.com/JakeWharton/RxBinding" title="RxBinding" target="_blank" rel="external">RxBinding</a></td>
<td style="text-align:center">提供用RxJava绑定Android UI的API</td>
</tr>
</tbody>
</table>
<h1 id="控件库"><a href="#控件库" class="headerlink" title="控件库"></a>控件库</h1><hr>
<h2 id="1-下拉刷新、下拉加载"><a href="#1-下拉刷新、下拉加载" class="headerlink" title="1.下拉刷新、下拉加载"></a>1.下拉刷新、下拉加载</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/chrisbanes/Android-PullToRefresh" title="Android PullToRefresh" target="_blank" rel="external">Android PullToRefresh</a></td>
<td style="text-align:center">最经典、最多人用的下拉刷新、加载更多。</td>
<td style="text-align:center"><img src="https://github.com/chrisbanes/Android-PullToRefresh/raw/master/header_graphic.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh" title="Android Ultra Pull To Refresh" target="_blank" rel="external">Android Ultra Pull To Refresh</a></td>
<td style="text-align:center">非常方便自定义的下拉刷新框架，继承于ViewGroup可以包含任何View，使用起来非常简单，如果想要自定义样式，就像给ListView加一个HeaderView一样简</td>
<td style="text-align:center"><img src="https://camo.githubusercontent.com/588a2ef2cdcfb6c71e88437df486226dd15605b3/687474703a2f2f737261696e2d6769746875622e71696e6975646e2e636f6d2f756c7472612d7074722f73746f72652d686f7573652d737472696e672d61727261792e676966" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/Yalantis/Phoenix" title="Phoenix" target="_blank" rel="external">Phoenix</a></td>
<td style="text-align:center">漂亮的动态刷新库</td>
<td style="text-align:center"><img src="http://static.open-open.com/lib/uploadImg/20150604/20150604144436_710.jpg" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/alienjun/AJWaveRefreshForAndroid" title="AJWaveRefreshForAndroid" target="_blank" rel="external">AJWaveRefreshForAndroid</a></td>
<td style="text-align:center">便捷的水波纹加载效果</td>
<td style="text-align:center"><img src="https://github.com/alienjun/WaveRefreshForAndroid/raw/master/Sceenshots/screenshot1.gif" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="2-底部导航栏"><a href="#2-底部导航栏" class="headerlink" title="2.底部导航栏"></a>2.底部导航栏</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/armcha/LuseenBottomNavigation" title="LuseenBottomNavigation" target="_blank" rel="external">LuseenBottomNavigation</a></td>
<td style="text-align:center">很方便的遵循MD设计的底栏</td>
<td style="text-align:center"><img src="https://github.com/armcha/LuseenBottomNavigation/raw/master/ScreenShots/gifView2.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/aurelhubert/ahbottomnavigation" title="ahbottomnavigation" target="_blank" rel="external">ahbottomnavigation</a></td>
<td style="text-align:center">遵循谷歌设计规范的底栏库</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/aurelhubert/ahbottomnavigation/master/demo1.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/roughike/BottomBar" title="BottomBar" target="_blank" rel="external">BottomBar</a></td>
<td style="text-align:center">另一个遵循谷歌设计规范的底栏库（PS：之前我使用的时候有点小BUG现在不清楚）</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/roughike/BottomBar/master/demo_shifting.gif" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="3-二维码"><a href="#3-二维码" class="headerlink" title="3.二维码"></a>3.二维码</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/zxing/zxing" target="_blank" rel="external">Zxing</a></td>
<td style="text-align:center">谷歌开发的二维码处理库，质量没的说！一维码二维码都能扫！</td>
<td style="text-align:center"><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f3qm0ne4uqj20hj0mjwg6.jpg" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="4-侧滑菜单"><a href="#4-侧滑菜单" class="headerlink" title="4.侧滑菜单"></a>4.侧滑菜单</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/rudsonlive/NavigationDrawer-MaterialDesign" title="NavigationDrawer" target="_blank" rel="external">NavigationDrawer</a></td>
<td style="text-align:center">Material Design的抽屉模板库，快速搭建侧滑菜单。</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/rudsonlive/NavigationDrawer-MaterialDesign/master/Screenshot/Screenshot_01.png" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/jfeinstein10/SlidingMenu" title="SlidingMenu" target="_blank" rel="external">SlidingMenu</a></td>
<td style="text-align:center">之前也是个很优秀的侧滑库直到谷歌来搅局。。</td>
<td style="text-align:center"><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f3qlsuhmdnj208e0cr74c.jpg" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/mxn21/FlowingDrawer" title="FlowingDrawer" target="_blank" rel="external">FlowingDrawer</a></td>
<td style="text-align:center">超帅的侧滑菜单</td>
<td style="text-align:center"><img src="https://camo.githubusercontent.com/a7131784a75e6f07646108b8304b0a0d4efd306b/687474703a2f2f62616f62616f6c6f7665796f752e636f6d2f666c6f77696e676472617765722e676966" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="5-侧滑返回"><a href="#5-侧滑返回" class="headerlink" title="5.侧滑返回"></a>5.侧滑返回</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/bushijie/ParallaxSwipeBack" title="ParallaxSwipeBack" target="_blank" rel="external">ParallaxSwipeBack</a></td>
<td style="text-align:center">带视觉差的侧滑返回，类似于新版微信和lofter的侧滑返回效果。引入方便，核心代码只需几十行！</td>
<td style="text-align:center"><img src="https://github.com/bushijie/ParallaxSwipeBack/raw/master/show.gif" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="6-文本输入框"><a href="#6-文本输入框" class="headerlink" title="6.文本输入框"></a>6.文本输入框</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/rengwuxian/MaterialEditText" title="MaterialEditText" target="_blank" rel="external">MaterialEditText</a></td>
<td style="text-align:center">方便自定义的EditText控件库</td>
<td style="text-align:center"><img src="http://ww4.sinaimg.cn/large/6faa9679gw1f3qlt8eo9mj208c0dvwew.jpg" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="7-侧贴标签"><a href="#7-侧贴标签" class="headerlink" title="7.侧贴标签"></a>7.侧贴标签</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/linger1216/labelview" title="labelview" target="_blank" rel="external">labelview</a></td>
<td style="text-align:center">类似淘宝的侧贴标签库</td>
<td style="text-align:center"><img src="http://ww3.sinaimg.cn/large/6faa9679gw1f3qlvwi5txj20k00zkjz9.jpg" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/H07000223/FlycoLabelView" title="FlycoLabelView" target="_blank" rel="external">FlycoLabelView</a></td>
<td style="text-align:center">轻量级侧贴标签</td>
<td style="text-align:center"><img src="http://ww1.sinaimg.cn/large/6faa9679gw1f3qmq5do7ij20u01hck1o.jpg" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="8-侧滑功能项"><a href="#8-侧滑功能项" class="headerlink" title="8.侧滑功能项"></a>8.侧滑功能项</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/daimajia/AndroidSwipeLayout" title="AndroidSwipeLayout" target="_blank" rel="external">AndroidSwipeLayout</a></td>
<td style="text-align:center">类似QQ的侧滑删除</td>
<td style="text-align:center"><img src="https://camo.githubusercontent.com/183f464b177ffa9d0b35f396796ec64f37ce87db/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f36313064633033346a7731656a6f7175696476767367323038693036333075342e676966" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="9-动画库"><a href="#9-动画库" class="headerlink" title="9.动画库"></a>9.动画库</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/hitherejoe/animate" title="animate" target="_blank" rel="external">animate</a></td>
<td style="text-align:center">几乎涵盖所有MD动画</td>
<td style="text-align:center"><img src="https://github.com/JcmeLs/animate/raw/master/images/explode_window_transition.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/lgvalle/Material-Animations" title="Material-Animations" target="_blank" rel="external">Material-Animations</a></td>
<td style="text-align:center">MD动画库</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_explode.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/tyrantgit/ExplosionField" title="ExplosionField" target="_blank" rel="external">ExplosionField</a></td>
<td style="text-align:center">爆破效果的删除动画库</td>
<td style="text-align:center"><img src="https://github.com/tyrantgit/ExplosionField/raw/master/explosionfield.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/dinuscxj/LoadingDrawable" title="LoadingDrawable" target="_blank" rel="external">LoadingDrawable</a></td>
<td style="text-align:center">小清新的加载动画</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/dinuscxj/LoadingDrawable/master/Preview/SceneryDrawable.gif?width=300" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="10-搜索框"><a href="#10-搜索框" class="headerlink" title="10.搜索框"></a>10.搜索框</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/arimorty/floatingsearchview" title="floatingsearchview" target="_blank" rel="external">floatingsearchview</a></td>
<td style="text-align:center">自带动画与动态加载数据的搜索框控件</td>
<td style="text-align:center"><img src="https://github.com/arimorty/floatingsearchview/raw/master/images/vf353.gif" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="11-快捷选择"><a href="#11-快捷选择" class="headerlink" title="11.快捷选择"></a>11.快捷选择</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/afollestad/drag-select-recyclerview" title="drag-select-recyclerview" target="_blank" rel="external">drag-select-recyclerview</a></td>
<td style="text-align:center">一直觉得魅族的快捷选择很有用，终于找到一个类似功能的还支持recycleView</td>
<td style="text-align:center"><img src="https://github.com/afollestad/drag-select-recyclerview/raw/master/art/showcase.gif" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="12-引导页"><a href="#12-引导页" class="headerlink" title="12.引导页"></a>12.引导页</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/HeinrichReimer/material-intro" title="material-intro" target="_blank" rel="external">material-intro</a></td>
<td style="text-align:center">MD风格的引导页</td>
<td style="text-align:center"><img src="https://camo.githubusercontent.com/0ac94850f861178a7e72def63efc75cedabb7314/687474703a2f2f692e696d6775722e636f6d2f316c6e653279732e706e67" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/Cleveroad/SlidingTutorial-Android" title="SlidingTutorial-Android" target="_blank" rel="external">SlidingTutorial</a></td>
<td style="text-align:center">很顺滑的引导页</td>
<td style="text-align:center"><img src="https://github.com/Cleveroad/SlidingTutorial-Android/raw/master/images/demo.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/iammert/MaterialIntroView" title="MaterialIntroView" target="_blank" rel="external">MaterialIntroView</a></td>
<td style="text-align:center">MD式的高亮引导页</td>
<td style="text-align:center"><img src="https://raw.githubusercontent.com/iammert/MaterialIntroView/master/art/materialintroviewgif.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/hanks-zyh/HTextView" title="HTextView" target="_blank" rel="external">HTextView</a></td>
<td style="text-align:center">其实这是个帅炸的文字展示库，可是我用过做引导页而且逼格不错！</td>
<td style="text-align:center"><img src="https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo2.gif" alt=""></td>
</tr>
</tbody>
</table>
<h2 id="13-菜单（高能）"><a href="#13-菜单（高能）" class="headerlink" title="13.菜单（高能）"></a>13.菜单（高能）</h2><table>
<thead>
<tr>
<th>名称</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">展示图</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/xmuSistone/android-snake-menu" title="android-snake-menu" target="_blank" rel="external">android-snake-menu</a></td>
<td style="text-align:center">类似Tumblr的蛇形菜单</td>
<td style="text-align:center"><img src="https://github.com/xmuSistone/android-snake-menu/raw/master/capture1.gif" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/DxTT/coolMenu" title="coolMenu" target="_blank" rel="external">coolMenu</a></td>
<td style="text-align:center">帅炸的视窗菜单</td>
<td style="text-align:center"><img src="http://ww4.sinaimg.cn/large/6faa9679gw1f3qn29qv8aj207x0dgwer.jpg" alt=""></td>
</tr>
<tr>
<td><a href="https://github.com/Nightonke/BoomMenu" title="BoomMenu" target="_blank" rel="external">BoomMenu</a></td>
<td style="text-align:center">爆炸式的弹出菜单</td>
<td style="text-align:center"><img src="https://github.com/Nightonke/BoomMenu/raw/master/Pictures/show_share.gif?raw=true" alt=""></td>
</tr>
</tbody>
</table>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="这次把我觉得可以的库全放了上来，这些库都是我再Github上Fork来的，github上优秀的开源库很多，经常找些优秀的库可以缩短开发时间，多看些开源项目也有利于开发与代码规范，特别是国外的库，里面的示例代码框架超级好！"><a href="#这次把我觉得可以的库全放了上来，这些库都是我再Github上Fork来的，github上优秀的开源库很多，经常找些优秀的库可以缩短开发时间，多看些开源项目也有利于开发与代码规范，特别是国外的库，里面的示例代码框架超级好！" class="headerlink" title="这次把我觉得可以的库全放了上来，这些库都是我再Github上Fork来的，github上优秀的开源库很多，经常找些优秀的库可以缩短开发时间，多看些开源项目也有利于开发与代码规范，特别是国外的库，里面的示例代码框架超级好！"></a>这次把我觉得可以的库全放了上来，这些库都是我再Github上Fork来的，github上优秀的开源库很多，经常找些优秀的库可以缩短开发时间，多看些开源项目也有利于开发与代码规范，特别是国外的库，里面的示例代码框架超级好！</h2><p>PS：本文长期更新，敬请期待！排版很乱。。。轻轻喷</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[工厂方法模式]]></title>
      <url>http://jcmels.github.io/2016/05/02/factory-pattern2/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一期简单工厂模式在缺点中，我提到了违背了<code>开闭原则</code>，那么什么是开闭原则？一句话解释就是<strong>对于扩展是开放的，对修改是关闭的。</strong>当我们需要添加新产品的时候需要修改工厂类，所以这就违反了对修改是关闭的这个原则。那么有什么设计模式既有简单工厂模式的优点，又不违反开闭原则呢？答案是——工厂方法模式。<br><a id="more"></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>工厂方法模式又叫做虚拟构造子(Cirtual Constructor)模式或者多态工厂（Polymorphic Factory）模式。  </p>
<p>工厂方法模式的用意是定义一个创建产品对象的工厂接口，将实际创建工作推迟到子类中。  </p>
<p>首先，在工厂方法模式中，核心的工厂类不再负责所以产品的创建，而是将具体创建的工作交给子类去做.这个核心类则摇身一变，成为了一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。  </p>
<p>这种进一步抽象化的结果，使这种工厂方法模式可以用来予许系统在不修改具体工厂角色的情况下引进新的产品，也就遵循了开闭原则。</p>
<p>工厂方法模式是一种创建型设计模式，他是一个结构简单的模式，其实我们不知不觉中就用过工厂方法模式，只是可能你还没意识到，比如Android开发中的Activity中的<code>onCreate</code>方法就是一个工厂方法。<br>既然它那么常用，那么它有什么优缺点呢？上文提到过它有简单工厂模式的优点，所以它的优点有：  </p>
<ul>
<li>可维护性高</li>
<li>可复用性高</li>
<li>拓展性好</li>
<li>灵活好用</li>
</ul>
<p>缺点：  </p>
<ul>
<li>每次有新产品都需要添加一个产品类</li>
<li>需要引入抽象层，导致类结构复杂化</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>工厂方法模式结构图如下：<br><img src="http://ww2.sinaimg.cn/large/6faa9679gw1f3gyocxdn4j20bu07n3yw.jpg" alt=""><br>从上图可以看出，工厂方法模式涉及到抽象工厂的角色，具体工厂角色，抽象产品以及具体产品等四个角色，他们分别有什么作用？  </p>
<ul>
<li>抽象工厂角色是工厂方法模式的核心，它是与应用程序无关的。任何在模式中创建对象的工厂类必须实现这个接口。</li>
<li>具体工厂角色是实现了抽象工厂接口的具体Java类，具体工厂角色含有与应用密切相关的逻辑，并且受到应用程序的调用以创建产品对象。</li>
<li>抽象产品角色是工厂方法模式所创建的对象的超类型，也就是产品对象的共同父类或共同拥有的接口。</li>
<li>具体产品角色实现了抽象产品角色所申明的接口。工厂方法模式所创建的每一个对象都是某个具体产品角色的实例。</li>
</ul>
<p>结合披萨系统，用白话文来说就是之前厨师（工厂类）负责所有的烤披萨任务，太累了。于是招了两个厨师分别负责烤 <code>GreekPizza</code>披萨和 <code>CheesePizza</code>披萨，之前的厨师升级为厨师长（抽象工厂类），负责教那两位厨师（具体工厂类）烤披萨，自己则不用亲自动手烤披萨了。<br>附上代码前先来看看完整的类图：<br><img src="http://ww1.sinaimg.cn/large/6faa9679gw1f3gz3fgx7gj20vo0d340u.jpg" alt="">  </p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p><strong>抽象产品pizza</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>具体产品</strong><br><em>CheesePizza</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>GreekPizza</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span>  <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"准备GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>抽象工厂PizzaFactory</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PizzaFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 工厂方法</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>具体工厂</strong><br><em>CheesePizza</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizzaFactory</span> <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><em>GreekPizza</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizzaFactory</span>  <span class="keyword">implements</span> <span class="title">PizzaFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>客户端调用</strong>  </p>
<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>{
    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{
        PizzaFactory factory=<span class="keyword">new</span> CheesePizzaFactory();
        Pizza pizza=factory.createPizza();
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
        factory=<span class="keyword">new</span> GreekPizzaFactory();
        pizza=factory.createPizza();
        pizza.prepare();
        pizza.bake();
        pizza.cut();
        pizza.box();
    }
}
</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>工厂方法模式与简单工厂模式对比</strong><br>工厂方法模式跟简单工厂模式在结构上的不同是很明显的，工厂方法模式的核心是一个抽象工厂类，而简单工厂模式的核心在一个具体类。显而易见工厂方法模式这种结构更好扩展，权力下发，分布式比集中式更具优势。<br>如果系统需要加入一个新的产品，那么所需要的就是向系统中加入一个这个产品类以及它所对应的工厂类。没有必要修改客户端，也没有必要修改抽象工厂角色或者其他已有的具体工厂角色。对于增加新的产品类而言，这个系统完全支持开闭原则。<br>总的来说，工厂方法模式是个很好的设计模式，那我们什么时候该使用它呢？</p>
<blockquote>
<p>在任何需要生成复杂对象的地方，都可以使用工厂方法模式，不过在设计模式是个灵活的东西，具体什么时候用还需要设计者权衡利弊了。  </p>
</blockquote>
<hr>
<blockquote>
<p>下期将讲解抽象工厂模式，时间不定，敬请期待。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单工厂模式]]></title>
      <url>http://jcmels.github.io/2016/04/28/factory-pattern/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近上系统分析与设计课的时候，老师提到了程序员进阶必备之–设计模式，第一个讲的就是简单工厂模式，但由于课时紧张，没有细讲，然后我又觉得很有用，于是下课后参考《大话设计模式》这本书来学习设计模式，正好第一章也是简单工厂模式，那今天就讲讲这个简单工厂模式吧！<br><a id="more"></a></p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>工厂模式网上很多都是以披萨店为栗子，那我也用披萨店来做栗子吧！<br>先说说工厂模式的优点吧  </p>
<ul>
<li>可维护性高</li>
<li>可复用性高</li>
<li>拓展性好</li>
<li>灵活好用</li>
</ul>
<p>再来看看它有什么缺点：</p>
<ul>
<li>违背了开闭原则</li>
<li>所有业务逻辑都在工厂类实现，一旦工厂类出bug，整个系统不能用。</li>
</ul>
<h2 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h2><p>披萨店里有一名店长，目前卖两种口味披萨，<code>GreekPizza</code>和<code>CheesePizza</code>，每个披萨都有<code>prePare()</code>,<code>bake()</code>,<code>cut()</code>,<code>box()</code>这4种步骤，原料，烘培，切割，打包，最后给用户吃。<br><img src="http://i.imgur.com/7vhkJPv.png" alt=""></p>
<h2 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h2><p>在我们没学设计模式前，我们可能会这样写这个代码。<br><strong>pizza抽象类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>GreekPizza类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span>  <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"准备GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包GreekPizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>CheesePizza类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"准备CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在烤CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在切CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在打包CheesePizza~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>店长根据客户点的餐生成不同的披萨</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Pizza pizza;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"cheese"</span>.equal(orderType)) pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"greek"</span>.equal(orderType)) pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>业务很简答，根据用户想买的披萨，生成不同的披萨。<br>传统的设置这样也没错，如果业务发展，会造成什么问题呢？<br>现在如果多了一种口味 chocolatePizza，正常办法是生成一个ChocolatePizza类，继承于Pizza，然后在OrderPizza中，添加<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">"chocolate"</span>.equal(orderType)) pizza = <span class="keyword">new</span> ChocolatePizza();</span><br></pre></td></tr></table></figure></p>
<p>可是后来披萨口味越来越多，负责点餐的店长会很不开心的，既要点餐又要做披萨，一个人忙不够来，希望请一个厨师来专门做披萨，那样他才会轻松点。而他所想的解决方案，简单工厂模式就可以做到。</p>
<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式是类的创建模式，又叫做静态工厂方法<code>Static Factory Method</code>模式。简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例。<br>简单工厂模式的结构如下：<br><img src="http://i.imgur.com/9hTl6Rp.png" alt=""><br>从图中可以看出，简单工厂模式涉及到工厂角色，抽象产品以及具体产品，他们分别的作用是：  </p>
<ul>
<li>工厂：是工厂方法的核心，含有与应用紧密相关的商业逻辑。</li>
<li>抽象产品：是由工厂方法创建的对象的父类，或者他们共同拥有的接口，这里指的是pizza类。</li>
<li>具体产品：工厂方法所创建的任务对象，这里指的是GreekPizza和CheesePizza。</li>
</ul>
<p>把上面的披萨项目用简单工厂模式来实现的话，就是创建一个工厂类，相当于厨师，来“做pizza”，而店长只需要告诉他需要哪种pizza就可以了。<br><strong>工厂类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">CreatePizza</span><span class="params">(String orderType)</span></span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在使用的时候，店长只需要调用工厂类的<code>CreatePizza()</code>，静态方法就可以了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">Pizza pizza;</span><br><span class="line">pizza=SimplePizzaFactory.CreatePizza(<span class="string">"cheese"</span>);</span><br><span class="line">pizza=SimplePizzaFactory.CreatePizza(<span class="string">"greek"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样设计后，店长就轻松多了，只要负责告诉工厂类（厨师）需要什么类型的披萨就可以，终于不要担心搞错了而负责任。<br>而且当我们想添加品种时，只需要再新建一个类ChocolatePizza，然后在工厂类中加入：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"chocolate"</span>)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ChocolatePizza();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>然后调用的时候传入chocolate，即可生产Chocolatepizza了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>既然简单工厂模式有着可维护性高，可复用性高，拓展性好，灵活好用这些个有点，那我们什么时候该用它呢？</p>
<ol>
<li>工厂类负责创建的对象比较少时</li>
<li>客户端只知道传入工厂类的参数，对如何创建对象不关心时。</li>
</ol>
<hr>
<blockquote>
<p>下期将讲解工厂模式，时间不定，敬请期待。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[闲聊--没更新的日子在干什么]]></title>
      <url>http://jcmels.github.io/2016/04/21/jotting2/</url>
      <content type="html"><![CDATA[<p>首先，博主是个学生，最近老师在讲SSH，64个学时，4周讲完，然后每天几乎都满课每晚还要练习SSH，还要练习我的主业–Android。其次博主最近参加的比赛进了省赛，APP要完善，所以更没时间更新了。不过等博主有空的时候就会更新，而且更新的全是干货比如设计模式，比如Android开发小技巧，还有就是之前说过博主是个不更新就死星人，所以我还会更新些github上的Android库教程，当然Google开发的新功能我也会尽量更新的！<br>另外目前更新的设计模式都是理论知识，等有空了博主会研究下在安卓里设计模式的实践，到时候会同步更新博客的，敬请期待！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自我打脸。。。]]></title>
      <url>http://jcmels.github.io/2016/04/14/jotting/</url>
      <content type="html"><![CDATA[<p>说好了一天一更，还有这星期把hexo的完善教程放上来，可是太忙了没时间码字。。。真是自我打脸。。。后续教程会慢慢放上来的</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Markdown入门]]></title>
      <url>http://jcmels.github.io/2016/04/12/markdown/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;现如今，移动办公越来越多了，有时候需要在手机上写文章应急，可是排版很麻烦，直到有一天，朋友推荐给我一种全新的标记语言——Markdown，我刚开始听说标记语言的时候就在想标记语言在手机上排版不是更麻烦吗？后来经过了解才发现markdown是一种轻量级的标记语言，语法非常简单，常用的标记符号也就十来个，所以学习成本非常的低，而且用过一次就回不去了！<a id="more"></a>  </p>
<h1 id="what"><a href="#what" class="headerlink" title="what"></a>what</h1><h2 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Markdown 的目标是实现「易读易写」。<br>&nbsp;&nbsp;&nbsp;&nbsp;可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或 是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。</p>
</blockquote>
<h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><blockquote>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Markdown 语法的目标是：成为一种适用于网络的书写语言。<br>&nbsp;&nbsp;&nbsp;&nbsp;Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。  </p>
</blockquote>
<p>以上内容全是官方文档翻译而来的。</p>
<h1 id="why"><a href="#why" class="headerlink" title="why"></a>why</h1><ol>
<li>轻量级的标记语言</li>
<li>简洁的语法代替了排版</li>
<li>越来越多网站支持markdown</li>
<li>到处格式随心所欲</li>
<li>hexo框架发布文章用的是markdown=。=</li>
</ol>
<h1 id="how"><a href="#how" class="headerlink" title="how"></a>how</h1><blockquote>
<p><a href="http://www.markdown.cn/" title="markdown中文网" target="_blank" rel="external">Markdown官方中文文档</a>，这里有完整版的语法，我只挑常用语法与个别扩展语法进行说明。  </p>
</blockquote>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;每篇文章都需要标题，在Markdown中，想定义标题只需要在文字前加<code>#</code>就行了，记得后面空个空格  </p>
<blockquote>
<p><code># 一级标题</code></p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p><code>## 二级标题</code></p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><code>### 三级标题</code></p>
<h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3></blockquote>
<p>四级五级六级就以此类推。。。</p>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;写文章时我们也经常需要列举些东西，这时候就需要列表了，列表还是分为有序列表和无序列表。</p>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>在markdown中我们只需要在文字前加<code>1. 2. 3.</code>就可以生成有序列表，文字与标签之间必须要有空格 。</p>
<ol>
<li>列表1</li>
<li>列表2</li>
<li>列表3  </li>
</ol>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>在markdown中我们只需要在文字前加<code>-</code>、<code>+</code>、<code>*</code>中的其中一个标签就可以生成无序列表，文字与标签之间必须要有空格  。  </p>
<ul>
<li>列表</li>
</ul>
<ul>
<li>列表</li>
</ul>
<ul>
<li>列表</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>写文章时难免会要引用别人的句子，那就需要使用引用标签了，而markdown中引用标签只是一个<code>&gt;</code>大于号空格后面跟句子就行了</p>
<blockquote>
<p>举个栗子，我要吃栗子。</p>
</blockquote>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>写文章跳转也是常事，markdown中<code>[显示名称](链接)</code>就可以添加超链接了如<code>[baidu](http://www.baidu.com)</code><br><a href="http://www.baidu.com" target="_blank" rel="external">baidu</a></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>markdown中插图片是插URL的，当然放文件夹里也可以通过路径访问，markdownpad可以自动生成URL不过也可以使用CloudApp生成URL。图片代码为<code>![图片名](URL)</code><br><img src="http://i.imgur.com/6Ylb81A.png" alt="悠行"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>作为程序员，我们的博客会经常分享些代码，那么就需要代码框了！在markdown下很简单，只需要两个反引号`把代码放在中间就行了。当然hexo有代码高亮机制，详情可以看之前的博文。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       	<span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      	 	setContentView(R.layout.activity_main);</span><br><span class="line">  	 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>有时候我们需要用分割线来划分区域，那么在markdown中我们只需要打三个<code>***</code>或者三个<code>---</code>来添加分割线  </p>
<hr>
<h2 id="表格（扩展）"><a href="#表格（扩展）" class="headerlink" title="表格（扩展）"></a>表格（扩展）</h2><p>表格在markdown中就比较麻烦了，它属于扩展语法<br>格式为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 表头<span class="number">1</span> | 表头<span class="number">2</span> | 表头<span class="number">3</span> |</span><br><span class="line">| ----|:----:| ----: |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br><span class="line">| 内容 | 内容 | 内容 |</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>表头1</th>
<th style="text-align:center">表头2</th>
<th style="text-align:right">表头3</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
</tbody>
</table>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>markdown提供了粗体跟斜体，而且很方便。<br>粗体：<code>** 中间文字 **</code>  <strong>粗体</strong><br>斜体：<code>* 中间文字*</code>  <em>斜体</em></p>
<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>在markdown中特殊字符如*、+、-这些一般都不会显示出来，这时候就需要转义了，在字符前加\就可以了</p>
<h1 id="tool"><a href="#tool" class="headerlink" title="tool"></a>tool</h1><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><ul>
<li>ATOM</li>
<li>sublime</li>
<li>markdownpad</li>
<li>Mou (mac)</li>
<li>Ulysses (mac)</li>
<li>简书（web）</li>
<li>为知笔记</li>
</ul>
<h2 id="图片转URL"><a href="#图片转URL" class="headerlink" title="图片转URL"></a>图片转URL</h2><ul>
<li><a href="http://www.getcloudapp.com/" title="Cloudapp" target="_blank" rel="external">Cloudapp</a></li>
<li><a href="http://weibotuchuang.sinaapp.com/" target="_blank" rel="external">围脖床图修复计划</a></li>
<li>markdownpad自带</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github搭个人博客第一章--发布第一篇文章]]></title>
      <url>http://jcmels.github.io/2016/04/11/hexo2/</url>
      <content type="html"><![CDATA[<p><img src="http://i.imgur.com/GDP5bNB.jpg" alt=""><br>&nbsp;&nbsp;我们建立独立博客都是为了发（装）博（X）文，那如何发呢？或者说如何编辑和发布呢？接下来我们将会学习发布第一篇文章。<br><a id="more"></a></p>
<h2 id="新建文档"><a href="#新建文档" class="headerlink" title="新建文档"></a>新建文档</h2><p>打开你的hexo文件夹，右键git bash，输入命令：<br><code>hexo new &quot;my new post&quot;</code></p>
<h2 id="编辑文档"><a href="#编辑文档" class="headerlink" title="编辑文档"></a>编辑文档</h2><p>在hexo文件夹下找到source_post文件夹，再从source_post中找到我们刚新建的my-new-post.md文件，使用文本编辑器如（ATOM）或者专门的markdownpad。markdown语法可以百度，也可以等明天的教程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--- </span><br><span class="line">title: my new post #可以改成中文的，如“新文章”</span><br><span class="line">date: 2016-02-21 16:04:09 #发表日期，一般不改动</span><br><span class="line">categories: blog #文章文类</span><br><span class="line">tags: blog #文章标签</span><br><span class="line">---</span><br><span class="line">#这里是正文，用markdown写，你可以选择写一段显示在首页的简介后，加上</span><br><span class="line">&lt;!--more--&gt;，在&lt;!--more--&gt;之前的内容会显示在首页，之后的内容会被隐藏，当游客点击Read more才能看到。</span><br></pre></td></tr></table></figure></p>
<h2 id="发布博文"><a href="#发布博文" class="headerlink" title="发布博文"></a>发布博文</h2><p>写完文章后，你可以使用以下命令生成静态文件。<br><code>hexo g</code><br>现在可以在本地预览效果，输入以下命令。<br><code>hexo s</code><br>觉得排版OK了，内容也完善了，输入以下命令发布。<br><code>hexo d</code><br>然后就可以通过你的域名访问了，比如<a href="http://jcmels.github.io">http://jcmels.github.io</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo代码高亮]]></title>
      <url>http://jcmels.github.io/2016/04/11/code-highlight/</url>
      <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;程序员博客会经常贴代码,而直接用tab或者``来复制代码是不会显示高亮的，查了一下hexo官网，hexo对这个问题也有解决方案：<br><img src="http://i.imgur.com/hmr5EHB.png" alt=""><br><a id="more"></a></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>{

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{
        <span class="keyword">super</span>.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }
}
</code></pre>
<p>具体高亮是什么颜色还是要看你的主题了。</p>
<h2 id="常用语言对应表"><a href="#常用语言对应表" class="headerlink" title="常用语言对应表"></a>常用语言对应表</h2><table>
<thead>
<tr>
<th>语言</th>
<th>对应代码</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bash</td>
<td>bash, sh, zsh</td>
</tr>
<tr>
<td>C#</td>
<td>cs, csharp</td>
</tr>
<tr>
<td>C++</td>
<td>cpp, c, cc, h, c++, h++, hpp</td>
</tr>
<tr>
<td>CSS</td>
<td>css</td>
</tr>
<tr>
<td>DOS</td>
<td>dos, bat, cmd</td>
</tr>
<tr>
<td>HTML, XML</td>
<td>xml, html, xhtml, rss, atom, xjb, xsd, xsl, plist</td>
</tr>
<tr>
<td>JSON</td>
<td>json</td>
</tr>
<tr>
<td>Java</td>
<td>java, jsp</td>
</tr>
<tr>
<td>JavaScript</td>
<td>javascript, js, jsx</td>
</tr>
<tr>
<td>Objective C</td>
<td>objectivec, mm, objc, obj-c</td>
</tr>
<tr>
<td>PHP</td>
<td>php, php3, php4, php5, php6</td>
</tr>
<tr>
<td>Ruby</td>
<td>ruby, rb, gemspec, podspec, thor, irb</td>
</tr>
<tr>
<td>SQL</td>
<td>sql</td>
</tr>
<tr>
<td>Swift</td>
<td>swift</td>
</tr>
<tr>
<td>VB.Net</td>
<td>vbnet, vb</td>
</tr>
</tbody>
</table>
<h2 id="所有语言对应表"><a href="#所有语言对应表" class="headerlink" title="所有语言对应表"></a>所有语言对应表</h2><table>
<thead>
<tr>
<th>语言</th>
<th>对应代码</th>
</tr>
</thead>
<tbody>
<tr>
<td>Zephir</td>
<td>Zephir</td>
</tr>
<tr>
<td>XQuery</td>
<td>xpath, xq </td>
</tr>
<tr>
<td>1C</td>
<td>1c</td>
</tr>
<tr>
<td>Access logs</td>
<td>accesslog</td>
</tr>
<tr>
<td>ARM assembler</td>
<td>armasm, arm</td>
</tr>
<tr>
<td>AVR assembler</td>
<td>avrasm</td>
</tr>
<tr>
<td>ActionScript</td>
<td>actionscript, as</td>
</tr>
<tr>
<td>Apache</td>
<td>apache, apacheconf</td>
</tr>
<tr>
<td>AppleScript</td>
<td>applescript, osascript</td>
</tr>
<tr>
<td>AsciiDoc</td>
<td>asciidoc, adoc</td>
</tr>
<tr>
<td>AspectJ</td>
<td>aspectj</td>
</tr>
<tr>
<td>AutoHotkey</td>
<td>autohotkey</td>
</tr>
<tr>
<td>AutoIt</td>
<td>autoit</td>
</tr>
<tr>
<td>Axapta</td>
<td>axapta</td>
</tr>
<tr>
<td>Bash</td>
<td>bash, sh, zsh</td>
</tr>
<tr>
<td>Basic</td>
<td>basic</td>
</tr>
<tr>
<td>Brainfuck</td>
<td>brainfuck, bf</td>
</tr>
<tr>
<td>C#</td>
<td>cs, csharp</td>
</tr>
<tr>
<td>C++</td>
<td>cpp, c, cc, h, c++, h++, hpp</td>
</tr>
<tr>
<td>C/AL</td>
<td>cal</td>
</tr>
<tr>
<td>Cache Object Script</td>
<td>cos, cls</td>
</tr>
<tr>
<td>CMake</td>
<td>cmake, cmake.in</td>
</tr>
<tr>
<td>CSP</td>
<td>csp</td>
</tr>
<tr>
<td>CSS</td>
<td>css</td>
</tr>
<tr>
<td>Cap’n Proto</td>
<td>capnproto, capnp</td>
</tr>
<tr>
<td>Clojure</td>
<td>clojure, clj</td>
</tr>
<tr>
<td>CoffeeScript</td>
<td>coffeescript, coffee, cson, iced</td>
</tr>
<tr>
<td>Crmsh</td>
<td>crmsh, crm, pcmk</td>
</tr>
<tr>
<td>Crystal</td>
<td>crystal, cr</td>
</tr>
<tr>
<td>D</td>
<td>d</td>
</tr>
<tr>
<td>DNS Zone file</td>
<td>dns, zone, bind</td>
</tr>
<tr>
<td>DOS</td>
<td>dos, bat, cmd</td>
</tr>
<tr>
<td>Dart</td>
<td>dart</td>
</tr>
<tr>
<td>Delphi</td>
<td>delphi, dpr, dfm, pas, pascal, freepascal, lazarus, lpr, lfm</td>
</tr>
<tr>
<td>Diff</td>
<td>diff, patch</td>
</tr>
<tr>
<td>Django</td>
<td>django, jinja</td>
</tr>
<tr>
<td>Dockerfile</td>
<td>dockerfile, docker</td>
</tr>
<tr>
<td>DTS (Device Tree)</td>
<td>dts</td>
</tr>
<tr>
<td>Dust</td>
<td>dust, dst</td>
</tr>
<tr>
<td>Elixir</td>
<td>elixir</td>
</tr>
<tr>
<td>Elm</td>
<td>elm</td>
</tr>
<tr>
<td>Erlang</td>
<td>erlang, erl</td>
</tr>
<tr>
<td>F#</td>
<td>fsharp, fs</td>
</tr>
<tr>
<td>FIX</td>
<td>fix</td>
</tr>
<tr>
<td>Fortran</td>
<td>fortran, f90, f95</td>
</tr>
<tr>
<td>G-Code</td>
<td>gcode, nc</td>
</tr>
<tr>
<td>Gams</td>
<td>gams, gms</td>
</tr>
<tr>
<td>GAUSS</td>
<td>gauss, gss</td>
</tr>
<tr>
<td>Gherkin</td>
<td>gherkin</td>
</tr>
<tr>
<td>Go</td>
<td>go, golang</td>
</tr>
<tr>
<td>Golo</td>
<td>golo, gololang</td>
</tr>
<tr>
<td>Gradle</td>
<td>gradle</td>
</tr>
<tr>
<td>Groovy</td>
<td>groovy</td>
</tr>
<tr>
<td>HTML, XML</td>
<td>xml, html, xhtml, rss, atom, xjb, xsd, xsl, plist</td>
</tr>
<tr>
<td>HTTP</td>
<td>http, https</td>
</tr>
<tr>
<td>Haml</td>
<td>haml</td>
</tr>
<tr>
<td>Handlebars</td>
<td>handlebars, hbs, html.hbs, html.handlebars</td>
</tr>
<tr>
<td>Haskell</td>
<td>haskell, hs</td>
</tr>
<tr>
<td>Haxe</td>
<td>haxe, hx</td>
</tr>
<tr>
<td>Ini</td>
<td>ini</td>
</tr>
<tr>
<td>Inform7</td>
<td>inform7, i7</td>
</tr>
<tr>
<td>IRPF90</td>
<td>irpf90</td>
</tr>
<tr>
<td>JSON</td>
<td>json</td>
</tr>
<tr>
<td>Java</td>
<td>java, jsp</td>
</tr>
<tr>
<td>JavaScript</td>
<td>javascript, js, jsx</td>
</tr>
<tr>
<td>Lasso</td>
<td>lasso, ls, lassoscript</td>
</tr>
<tr>
<td>Less</td>
<td>less</td>
</tr>
<tr>
<td>Lisp</td>
<td>lisp</td>
</tr>
<tr>
<td>LiveCode Server</td>
<td>livecodeserver</td>
</tr>
<tr>
<td>LiveScript</td>
<td>livescript, ls</td>
</tr>
<tr>
<td>Lua</td>
<td>lua</td>
</tr>
<tr>
<td>Makefile</td>
<td>makefile, mk, mak</td>
</tr>
<tr>
<td>Markdown</td>
<td>markdown, md, mkdown, mkd</td>
</tr>
<tr>
<td>Mathematica</td>
<td>mathematica, mma</td>
</tr>
<tr>
<td>Matlab</td>
<td>matlab</td>
</tr>
<tr>
<td>Maxima</td>
<td>maxima</td>
</tr>
<tr>
<td>Maya Embedded Language</td>
<td>mel</td>
</tr>
<tr>
<td>Mercury</td>
<td>mercury</td>
</tr>
<tr>
<td>Mizar</td>
<td>mizar</td>
</tr>
<tr>
<td>Mojolicious</td>
<td>mojolicious</td>
</tr>
<tr>
<td>Monkey</td>
<td>monkey</td>
</tr>
<tr>
<td>Moonscript</td>
<td>moonscript, moon</td>
</tr>
<tr>
<td>NSIS</td>
<td>nsis</td>
</tr>
<tr>
<td>Nginx</td>
<td>nginx, nginxconf</td>
</tr>
<tr>
<td>Nimrod</td>
<td>nimrod, nim</td>
</tr>
<tr>
<td>Nix</td>
<td>nix</td>
</tr>
<tr>
<td>OCaml</td>
<td>ocaml, ml</td>
</tr>
<tr>
<td>Objective C</td>
<td>objectivec, mm, objc, obj-c</td>
</tr>
<tr>
<td>OpenGL Shading Language</td>
<td>glsl</td>
</tr>
<tr>
<td>OpenSCAD</td>
<td>openscad, scad</td>
</tr>
<tr>
<td>Oracle Rules Language</td>
<td>ruleslanguage</td>
</tr>
<tr>
<td>Oxygene</td>
<td>oxygene</td>
</tr>
<tr>
<td>PF</td>
<td>pf, pf.conf</td>
</tr>
<tr>
<td>PHP</td>
<td>php, php3, php4, php5, php6</td>
</tr>
<tr>
<td>Parser3</td>
<td>parser3</td>
</tr>
<tr>
<td>Perl</td>
<td>perl, pl, pm</td>
</tr>
<tr>
<td>PowerShell</td>
<td>powershell, ps</td>
</tr>
<tr>
<td>Processing</td>
<td>processing</td>
</tr>
<tr>
<td>Prolog</td>
<td>prolog</td>
</tr>
<tr>
<td>Protocol Buffers</td>
<td>protobuf</td>
</tr>
<tr>
<td>Puppet</td>
<td>puppet, pp</td>
</tr>
<tr>
<td>Python</td>
<td>python, py, gyp</td>
</tr>
<tr>
<td>Q</td>
<td>k, kdb</td>
</tr>
<tr>
<td>QML</td>
<td>qml</td>
</tr>
<tr>
<td>R</td>
<td>r</td>
</tr>
<tr>
<td>RenderMan RIB</td>
<td>rib</td>
</tr>
<tr>
<td>RenderMan RSL</td>
<td>rsl</td>
</tr>
<tr>
<td>Roboconf</td>
<td>graph, instances</td>
</tr>
<tr>
<td>Ruby</td>
<td>ruby, rb, gemspec, podspec, thor, irb</td>
</tr>
<tr>
<td>Rust</td>
<td>rust, rs</td>
</tr>
<tr>
<td>SCSS</td>
<td>scss</td>
</tr>
<tr>
<td>SQL</td>
<td>sql</td>
</tr>
<tr>
<td>STEP Part 21</td>
<td>p21, step, stp</td>
</tr>
<tr>
<td>Scala</td>
<td>scala</td>
</tr>
<tr>
<td>Scheme</td>
<td>scheme</td>
</tr>
<tr>
<td>Scilab</td>
<td>scilab, sci</td>
</tr>
<tr>
<td>Smali</td>
<td>smali</td>
</tr>
<tr>
<td>Smalltalk</td>
<td>smalltalk, st</td>
</tr>
<tr>
<td>Stan</td>
<td>stan</td>
</tr>
<tr>
<td>Stata</td>
<td>stata</td>
</tr>
<tr>
<td>Stylus</td>
<td>stylus, styl</td>
</tr>
<tr>
<td>Swift</td>
<td>swift</td>
</tr>
<tr>
<td>Tcl</td>
<td>tcl, tk</td>
</tr>
<tr>
<td>TeX</td>
<td>tex</td>
</tr>
<tr>
<td>Thrift</td>
<td>thrift</td>
</tr>
<tr>
<td>TP</td>
<td>tp</td>
</tr>
<tr>
<td>Twig</td>
<td>twig, craftcms</td>
</tr>
<tr>
<td>TypeScript</td>
<td>typescript, ts</td>
</tr>
<tr>
<td>VB.Net</td>
<td>vbnet, vb</td>
</tr>
<tr>
<td>VBScript</td>
<td>vbscript, vbs</td>
</tr>
<tr>
<td>VHDL</td>
<td>vhdl</td>
</tr>
<tr>
<td>Vala</td>
<td>vala</td>
</tr>
<tr>
<td>Verilog</td>
<td>verilog, v</td>
</tr>
<tr>
<td>Vim Script</td>
<td>vim</td>
</tr>
<tr>
<td>x86 Assembly</td>
<td>x86asm</td>
</tr>
<tr>
<td>XL</td>
<td>xl, tao</td>
</tr>
<tr>
<td>XQuery</td>
<td>xpath, xq</td>
</tr>
<tr>
<td>Zephir</td>
<td>zephir, zep</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+github搭个人博客第一章--安装Hexo]]></title>
      <url>http://jcmels.github.io/2016/04/10/hexo1/</url>
      <content type="html"><![CDATA[<p>作为一个程序员，有一个自己的博客是很必要的，目前市面上有好多博客给我们选择，比如CSDN或者新浪的，可是这都不是我想要的，无意中我发现了hexo，一秒钟爱上它！美好的东西可是好多刺的比如玫瑰，所以在搭建hexo的时候我也踩了好多坑，本系列教材帮你填坑，让你搭hexo时顺风顺水！<a id="more"></a></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><ol>
<li>必要且充分条件——fq</li>
<li>下载<a href="https://nodejs.org/en/" title="node.js" target="_blank" rel="external">node.js</a></li>
<li>下载<a href="http://git-scm.com/download" title="git" target="_blank" rel="external">Git</a></li>
<li>拥有<a href="https://github.com/" title="github" target="_blank" rel="external">github</a>账号</li>
<li>了解node、Git基本命令</li>
<li>markdowmpad！！强烈推荐</li>
</ol>
<h1 id="正式安装"><a href="#正式安装" class="headerlink" title="正式安装"></a>正式安装</h1><p>安装git和node.js步骤就在这里省略了，毕竟都是下一步下一步的操作。  </p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><hr>
<p>环境安装好了，现在需要安装主角hexo！在任意位置右键鼠标选择  git bash here  </p>
<p><img src="http://i.imgur.com/kV3YEmv.png" alt=""><br>输入安装hexo的命令<br><code>npm install -g hexo</code><br><img src="http://i.imgur.com/eb7TyEz.png" alt=""><br>当你看到下图所示的代码就代表你安装成功了<br><img src="http://i.imgur.com/9PKJjeD.png" alt="">  </p>
<h2 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h2><p>在你喜欢的位置新建文件夹比如E：/hexo，右键还是选git bash here，输入代码：<code>hexo init</code>他会从github下载文件并初始化你的hexo文件夹<br>安装依赖包，输入代码：<br><code>npm install</code>  </p>
<p><img src="http://i.imgur.com/VNbOwno.png" alt="">  </p>
<h2 id="部署在本地"><a href="#部署在本地" class="headerlink" title="部署在本地"></a>部署在本地</h2><p>然后让我们看下刚刚下载了什么东西，还是在E：/hexo中右键选git bash here，输入代码：<br><code>hexo g</code><br><img src="http://i.imgur.com/nqdVkxq.png" alt=""><br><code>hexo d</code><br><img src="http://i.imgur.com/8gpCItr.png" alt=""><br>这样我们就把网页部署在本地，可以通过<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>访问，是不是好帅！当然我们目前只是在本地预览，别人想要访问的话还需要部署到服务器。</p>
]]></content>
    </entry>
    
  
  
</search>
